name: Comprehensive Healthcare Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

env:
  NODE_VERSION: '18'
  HEALTHCARE_TEST_MODE: 'true'
  DOH_COMPLIANCE_CHECK: 'enabled'
  DAMAN_TEST_MODE: 'true'

jobs:
  # Security Testing with OWASP ZAP
  security-testing:
    name: Security Testing (OWASP ZAP)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application for testing
        run: |
          npm start &
          sleep 30
          curl -f http://localhost:3000 || exit 1
        env:
          CI: true
          PORT: 3000

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T 60 -m 10'

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T 120'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-report
          path: |
            report_html.html
            report_json.json
            report_md.md

  # Load Testing with K6 and Artillery
  load-testing:
    name: Load Testing (K6 & Artillery)
    runs-on: ubuntu-latest
    needs: [security-testing]
    strategy:
      matrix:
        test-type: [k6, artillery]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and start application
        run: |
          npm run build
          npm start &
          sleep 30
        env:
          CI: true
          PORT: 3000

      - name: Install K6
        if: matrix.test-type == 'k6'
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run K6 Load Tests
        if: matrix.test-type == 'k6'
        run: |
          k6 run --out json=test-results/k6-results.json src/test/load/k6-load-test.js
        env:
          BASE_URL: http://localhost:3000

      - name: Install Artillery
        if: matrix.test-type == 'artillery'
        run: npm install -g artillery@latest

      - name: Run Artillery Load Tests
        if: matrix.test-type == 'artillery'
        run: |
          artillery run src/test/load/artillery-healthcare-config.yml --output test-results/artillery-results.json

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results-${{ matrix.test-type }}
          path: test-results/

  # End-to-End Testing with Playwright
  e2e-testing:
    name: E2E Testing (Playwright)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/4, 2/4, 3/4, 4/4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30
        env:
          CI: true
          PORT: 3000

      - name: Run Playwright E2E tests
        run: |
          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          HEALTHCARE_TEST_MODE: 'true'
          DOH_COMPLIANCE_CHECK: 'enabled'

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}
          path: playwright-report/
          retention-days: 30

  # Healthcare Workflow Testing
  healthcare-workflow-testing:
    name: Healthcare Workflow Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application with healthcare test data
        run: |
          npm run seed:test-data
          npm start &
          sleep 30
        env:
          CI: true
          PORT: 3000
          HEALTHCARE_TEST_MODE: 'true'
          DOH_COMPLIANCE_CHECK: 'enabled'
          DAMAN_TEST_MODE: 'true'

      - name: Run Healthcare Workflow Tests
        run: |
          npx playwright test src/test/e2e/healthcare-workflows.spec.ts --reporter=html
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Run DOH Compliance Tests
        run: |
          npx playwright test --grep "@critical" --reporter=json:test-results/doh-compliance.json

      - name: Run DAMAN Integration Tests
        run: |
          npx playwright test --grep "@integration" --reporter=json:test-results/daman-integration.json

      - name: Upload healthcare test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: healthcare-workflow-results
          path: |
            playwright-report/
            test-results/

  # Performance Regression Testing
  performance-regression:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30
        env:
          CI: true
          PORT: 3000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run Performance Tests
        run: |
          npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            .lighthouseci/
            test-results/performance/

  # Accessibility Testing
  accessibility-testing:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30
        env:
          CI: true
          PORT: 3000

      - name: Run Accessibility Tests
        run: |
          npx playwright test --grep "@accessibility" --reporter=html

      - name: Run axe-core accessibility scan
        run: |
          npm run test:accessibility

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: |
            playwright-report/
            test-results/accessibility/

  # Test Results Aggregation
  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [security-testing, load-testing, e2e-testing, healthcare-workflow-testing, performance-regression, accessibility-testing]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate comprehensive test report
        run: |
          node scripts/generate-comprehensive-report.js

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: |
            test-results/comprehensive-report.html
            test-results/comprehensive-report.json

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'test-results/comprehensive-report.json';
            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              const comment = `## 🏥 Healthcare Platform Test Results\n\n` +
                `- **Security Tests**: ${report.security.status}\n` +
                `- **Load Tests**: ${report.performance.status}\n` +
                `- **E2E Tests**: ${report.e2e.status}\n` +
                `- **Healthcare Workflows**: ${report.healthcare.status}\n` +
                `- **DOH Compliance**: ${report.compliance.status}\n` +
                `- **Accessibility**: ${report.accessibility.status}\n\n` +
                `[View Full Report](${report.reportUrl})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Quality Gate Check
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: [aggregate-results]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-test-report
          path: test-results/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run quality gate check
        run: |
          node scripts/quality-gate-check.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if quality gate not met
        run: |
          if [ -f "test-results/quality-gate-failed" ]; then
            echo "Quality gate check failed. See test results for details."
            exit 1
          fi
