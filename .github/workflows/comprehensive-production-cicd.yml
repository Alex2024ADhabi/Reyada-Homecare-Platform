name: Comprehensive Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *' # Daily security scans

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'your-registry.com'
  KUBERNETES_NAMESPACE: 'reyada-homecare'
  HEALTH_CHECK_TIMEOUT: '300'
  DEPLOYMENT_TIMEOUT: '600'

jobs:
  # Security and Vulnerability Scanning
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://your-staging-url.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Code Quality and Testing
  test-and-quality:
    name: Test Suite & Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e, accessibility]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build

      - name: Run DOH Compliance Tests
        run: |
          npm test src/test/compliance/doh-compliance-comprehensive.test.ts
        env:
          NODE_ENV: test

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:unit -- --coverage
          npm run test:coverage-report

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        run: |
          npm run test:integration
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Run E2E Tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run test:e2e
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0

      - name: Run Accessibility Tests
        if: matrix.test-type == 'accessibility'
        run: |
          npm run test:accessibility

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            playwright-report/

  # Performance and Load Testing
  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [test-and-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run Healthcare Load Tests
        run: |
          artillery run src/test/load/artillery-healthcare-config.yml
          artillery run src/test/load/artillery-clinical-config.yml
          artillery run src/test/load/artillery-daman-config.yml

      - name: Run K6 Performance Tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: src/test/load/k6-healthcare-load-test.js
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            artillery-report.html
            k6-results.json

  # Build and Container Security
  build-and-scan:
    name: Build & Container Security
    runs-on: ubuntu-latest
    needs: [security-scan, test-and-quality]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/reyada-homecare
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'container-scan-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'container-scan-results.sarif'

  # Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Kubernetes manifests
        run: |
          # Install kubeval
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin
          
          # Validate all Kubernetes files
          find kubernetes/ -name '*.yaml' -exec kubeval {} \;

      - name: Validate Terraform (if applicable)
        run: |
          if [ -d "terraform/" ]; then
            terraform init -backend=false
            terraform validate
            terraform plan -out=tfplan
          fi

      - name: Run infrastructure security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes,terraform
          output_format: sarif
          output_file_path: infrastructure-scan.sarif

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan, infrastructure-validation, performance-testing]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.reyada-homecare.ae
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          # Update image tags in manifests
          sed -i "s|IMAGE_TAG|${{ needs.build-and-scan.outputs.image-tag }}|g" kubernetes/staging/
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/staging/ -n ${{ env.KUBERNETES_NAMESPACE }}-staging
          
          # Wait for deployment to complete
          kubectl rollout status deployment/reyada-frontend -n ${{ env.KUBERNETES_NAMESPACE }}-staging --timeout=${{ env.DEPLOYMENT_TIMEOUT }}s

      - name: Run staging health checks
        run: |
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh https://staging.reyada-homecare.ae

      - name: Run staging smoke tests
        run: |
          npm run test:smoke -- --baseURL=https://staging.reyada-homecare.ae

  # Production Deployment (Blue-Green)
  deploy-production:
    name: Deploy to Production (Blue-Green)
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://reyada-homecare.ae
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Backup current production
        run: |
          chmod +x scripts/enhanced-backup-automation.sh
          ./scripts/enhanced-backup-automation.sh --pre-deployment

      - name: Deploy using Blue-Green strategy
        run: |
          chmod +x scripts/enhanced-blue-green-deploy.sh
          ./scripts/enhanced-blue-green-deploy.sh \
            --image=${{ needs.build-and-scan.outputs.image-tag }} \
            --namespace=${{ env.KUBERNETES_NAMESPACE }} \
            --health-check-url=https://reyada-homecare.ae/api/health

      - name: Run production health checks
        run: |
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh https://reyada-homecare.ae

      - name: Run production smoke tests
        run: |
          npm run test:smoke -- --baseURL=https://reyada-homecare.ae

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'ðŸš€ Production deployment successful! Version: ${{ needs.build-and-scan.outputs.image-tag }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-Deployment Monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring alerts
        run: |
          # Configure enhanced monitoring
          kubectl apply -f monitoring/prometheus/healthcare-monitoring-config.yaml
          kubectl apply -f monitoring/grafana/healthcare-dashboards.yaml

      - name: Run post-deployment tests
        run: |
          # Wait for systems to stabilize
          sleep 300
          
          # Run comprehensive health checks
          npm run test:post-deployment

      - name: Generate deployment report
        run: |
          chmod +x scripts/generate-comprehensive-report.js
          node scripts/generate-comprehensive-report.js \
            --deployment-id=${{ github.run_id }} \
            --version=${{ needs.build-and-scan.outputs.image-tag }}

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: |
            deployment-report.html
            health-check-results.json
            monitoring-setup.log

  # Rollback on Failure
  rollback-on-failure:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: failure()
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Execute emergency rollback
        run: |
          chmod +x scripts/rollback-enhanced.sh
          ./scripts/rollback-enhanced.sh \
            --namespace=${{ env.KUBERNETES_NAMESPACE }} \
            --reason="Deployment failure detected"

      - name: Restore from backup
        run: |
          chmod +x scripts/disaster-recovery.sh
          ./scripts/disaster-recovery.sh --restore-latest

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'ðŸš¨ Emergency rollback executed due to deployment failure!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Compliance and Audit Reporting
  compliance-reporting:
    name: Compliance & Audit Reporting
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate DOH compliance report
        run: |
          npm run generate:doh-compliance-report

      - name: Generate security audit report
        run: |
          npm run generate:security-audit-report

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: |
            reports/doh-compliance-*.pdf
            reports/security-audit-*.pdf
            reports/deployment-audit-*.json

      - name: Archive reports to secure storage
        run: |
          # Upload to secure compliance storage
          aws s3 cp reports/ s3://reyada-compliance-reports/$(date +%Y/%m/%d)/ --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
