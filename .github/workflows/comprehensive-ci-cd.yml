name: Comprehensive Healthcare Platform CI/CD

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scans at 2 AM UTC

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HEALTHCARE_COMPLIANCE_LEVEL: 'DOH_UAE'
  DATA_RESIDENCY: 'UAE'

jobs:
  # Security and Compliance Validation
  security-compliance:
    name: Security & Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate
          npm audit fix --dry-run

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'reyada-homecare'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-results
          path: reports/

      - name: Healthcare Compliance Check
        run: |
          echo "üè• Running DOH UAE Healthcare Compliance Validation"
          npm run test:doh-compliance
          echo "‚úÖ DOH Compliance validation passed"

      - name: Data Privacy Validation
        run: |
          echo "üîí Validating data privacy and GDPR compliance"
          # Check for sensitive data patterns
          grep -r --exclude-dir=node_modules --exclude-dir=.git -i "password\|secret\|key\|token" . || true
          echo "‚úÖ Data privacy validation completed"

  # Code Quality and Testing
  quality-testing:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security-compliance
    strategy:
      matrix:
        test-suite: [unit, integration, e2e, accessibility]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Lint code
        run: npm run lint

      - name: Type checking
        run: npx tsc --noEmit

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          case "${{ matrix.test-suite }}" in
            "unit")
              npm run test:run -- --reporter=verbose --coverage
              ;;
            "integration")
              npm run test:run -- src/test/integration/ --reporter=verbose
              ;;
            "e2e")
              npx playwright install --with-deps
              npm run test:e2e
              ;;
            "accessibility")
              npm run test:accessibility
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/
            playwright-report/

  # Build and Package
  build-package:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security-compliance, quality-testing]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: |
          echo "üèóÔ∏è Building healthcare platform for production"
          npm run build
          echo "‚úÖ Build completed successfully"

      - name: Build optimization analysis
        run: |
          echo "üìä Analyzing build size and performance"
          du -sh dist/
          find dist/ -name "*.js" -exec wc -c {} + | sort -n

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            HEALTHCARE_COMPLIANCE=${{ env.HEALTHCARE_COMPLIANCE_LEVEL }}
            DATA_RESIDENCY=${{ env.DATA_RESIDENCY }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Performance and Load Testing
  performance-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run performance tests
        run: |
          echo "‚ö° Running performance benchmarks"
          npm run test:performance

      - name: Load testing with Artillery
        run: |
          echo "üéØ Running load tests for healthcare endpoints"
          npx artillery run src/test/load/artillery-healthcare-config.yml

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-results/
            load-test-results/

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-package, performance-testing]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.reyada-homecare.ae
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          ./scripts/enhanced-blue-green-deploy.sh staging ${{ needs.build-package.outputs.image-tag }}

      - name: Run staging health checks
        run: |
          echo "üè• Running staging health checks"
          ./scripts/health-check.sh staging

      - name: Run staging smoke tests
        run: |
          echo "üí® Running staging smoke tests"
          npm run test:smoke -- --env=staging

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-package, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://reyada-homecare.ae
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-deployment validation
        run: |
          echo "üîç Running pre-deployment validation"
          ./scripts/pre-deployment-validation.sh

      - name: Deploy to production (Blue-Green)
        run: |
          echo "üöÄ Deploying to production with zero-downtime"
          ./scripts/enhanced-blue-green-deploy.sh production ${{ needs.build-package.outputs.image-tag }}

      - name: Run production health checks
        run: |
          echo "üè• Running production health checks"
          ./scripts/health-check.sh production

      - name: Run production smoke tests
        run: |
          echo "üí® Running production smoke tests"
          npm run test:smoke -- --env=production

      - name: Update monitoring dashboards
        run: |
          echo "üìä Updating monitoring dashboards"
          ./scripts/update-monitoring-dashboards.sh

      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment completed successfully"
          ./scripts/notify-deployment-success.sh

  # Post-deployment validation
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run comprehensive validation
        run: |
          echo "üî¨ Running comprehensive post-deployment validation"
          ./scripts/post-deployment-validation.sh

      - name: Update deployment status
        run: |
          echo "üìã Updating deployment status and metrics"
          ./scripts/update-deployment-metrics.sh

      - name: Generate deployment report
        run: |
          echo "üìÑ Generating deployment report"
          ./scripts/generate-deployment-report.sh

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: |
            deployment-report.html
            deployment-metrics.json
            health-check-results.json

# Cleanup and maintenance jobs
  cleanup:
    name: Cleanup & Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-production, post-deployment]
    if: always()
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "üßπ Cleaning up old deployment artifacts"
          # Cleanup logic here

      - name: Update security baselines
        run: |
          echo "üîí Updating security baselines"
          # Security baseline update logic here

      - name: Archive deployment logs
        run: |
          echo "üìö Archiving deployment logs for compliance"
          # Log archival logic here
