name: Healthcare Platform CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for dependency checks
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: reyada-homecare/reyada-frontend
  HEALTHCARE_MODE: true
  DOH_COMPLIANCE: enabled

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm audit --audit-level=high
    
    - name: Run ESLint
      run: |
        npm run lint -- --format=json --output-file=eslint-report.json
        npm run lint
    
    - name: Run TypeScript checks
      run: npm run build-no-errors
    
    - name: Run Prettier check
      run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
    
    - name: Security audit with npm audit
      run: npm audit --audit-level=moderate
    
    - name: Security scan with Snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Upload ESLint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json
        retention-days: 7

  # Unit and Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        test-type: [unit, integration, component]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        case "${{ matrix.test-type }}" in
          "unit")
            npm run test:unit -- --coverage --reporter=json --outputFile=unit-test-results.json
            ;;
          "integration")
            npm run test:integration -- --coverage --reporter=json --outputFile=integration-test-results.json
            ;;
          "component")
            npm run test:component -- --coverage --reporter=json --outputFile=component-test-results.json
            ;;
        esac
      env:
        NODE_ENV: test
        HEALTHCARE_TEST_MODE: comprehensive
        DOH_COMPLIANCE_CHECK: true
        HIPAA_VALIDATION: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.test-type }}-test-results
        path: ${{ matrix.test-type }}-test-results.json
        retention-days: 7
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: ${{ matrix.test-type }}
        name: ${{ matrix.test-type }}-coverage
        fail_ci_if_error: false

  # Healthcare Compliance Validation
  compliance-validation:
    name: Healthcare Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: DOH Compliance Validation
      run: |
        npm run test:compliance:doh
        npm run validate:doh-schema
      env:
        DOH_COMPLIANCE_CHECK: true
        DOH_VALIDATION: true
    
    - name: HIPAA Compliance Check
      run: |
        npm run test:compliance:hipaa
        npm run validate:hipaa-requirements
      env:
        HIPAA_VALIDATION: true
    
    - name: DAMAN Integration Validation
      run: |
        npm run test:integration:daman
        npm run validate:daman-standards
      env:
        DAMAN_INTEGRATION_TEST: mock
    
    - name: Generate compliance report
      run: |
        npm run generate:compliance-report
        cat compliance-report.json
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.json
        retention-days: 30

  # Accessibility Testing
  accessibility-testing:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        HEALTHCARE_MODE: true
    
    - name: Start application server
      run: |
        npm run preview &
        sleep 10
        curl -f http://localhost:4173 || exit 1
      env:
        PORT: 4173
    
    - name: Run accessibility tests
      run: |
        npm run test:accessibility
        npm run test:axe-core
      env:
        ACCESSIBILITY_TEST_URL: http://localhost:4173
    
    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: accessibility-report.json
        retention-days: 7

  # Build and Container Security
  build-and-security:
    name: Build & Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [test-suite, compliance-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Build application
      run: |
        npm run build
        ls -la dist/
      env:
        NODE_ENV: production
        HEALTHCARE_MODE: true
        DOH_COMPLIANCE: enabled
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run container structure tests
      run: |
        curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
        chmod +x container-structure-test-linux-amd64
        ./container-structure-test-linux-amd64 test --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --config container-structure-test.yaml
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi

  # Performance Testing
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'performance-test')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        HEALTHCARE_MODE: true
    
    - name: Start application server
      run: |
        npm run preview &
        sleep 15
        curl -f http://localhost:4173 || exit 1
      env:
        PORT: 4173
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        LHCI_SERVER_BASE_URL: http://localhost:4173
    
    - name: Run K6 performance tests
      run: |
        docker run --rm -i --network host grafana/k6 run - < src/test/load/k6-healthcare-load-test.js
      env:
        K6_TARGET_URL: http://localhost:4173
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          lighthouse-results.json
          k6-results.json
        retention-days: 7

  # Deployment Readiness Check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-and-security, accessibility-testing]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check deployment prerequisites
      run: |
        echo "Checking deployment readiness..."
        
        # Check if all required secrets are available
        if [ -z "${{ secrets.KUBECONFIG }}" ]; then
          echo "❌ KUBECONFIG secret not found"
          exit 1
        fi
        
        if [ -z "${{ secrets.DOCKER_REGISTRY_TOKEN }}" ]; then
          echo "❌ DOCKER_REGISTRY_TOKEN secret not found"
          exit 1
        fi
        
        echo "✅ All deployment prerequisites met"
    
    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin
        
        # Validate all Kubernetes manifests
        find kubernetes/ -name '*.yaml' -o -name '*.yml' | xargs kubeval
        echo "✅ All Kubernetes manifests are valid"
    
    - name: Healthcare compliance final check
      run: |
        echo "Performing final healthcare compliance check..."
        
        # Check for required healthcare environment variables
        if ! grep -q "HEALTHCARE_MODE" Dockerfile.frontend; then
          echo "❌ HEALTHCARE_MODE not configured in Dockerfile"
          exit 1
        fi
        
        if ! grep -q "DOH_COMPLIANCE" Dockerfile.frontend; then
          echo "❌ DOH_COMPLIANCE not configured in Dockerfile"
          exit 1
        fi
        
        echo "✅ Healthcare compliance check passed"
    
    - name: Generate deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Healthcare Mode:** Enabled" >> $GITHUB_STEP_SUMMARY
        echo "- **DOH Compliance:** Validated" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Status:** Ready for Production" >> $GITHUB_STEP_SUMMARY

  # Notification and Reporting
  notify-completion:
    name: Notify CI Completion
    runs-on: ubuntu-latest
    needs: [deployment-readiness]
    if: always()
    
    steps:
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#healthcare-deployments'
        text: |
          Healthcare Platform CI Pipeline Completed
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Actor: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Create deployment issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `CI Pipeline Failed - ${context.sha.substring(0, 7)}`,
            body: `
              ## CI Pipeline Failure Report
              
              **Commit:** ${context.sha}
              **Branch:** ${context.ref}
              **Actor:** ${context.actor}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              Please investigate the failure and take appropriate action.
              
              [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `,
            labels: ['bug', 'ci-failure', 'healthcare-platform']
          })
