name: Healthcare Platform CI/CD Production Pipeline

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'reyada-homecare-platform'
  HEALTHCARE_COMPLIANCE: 'DOH_UAE'
  SECURITY_SCAN_ENABLED: true

jobs:
  # Security and Vulnerability Scanning
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || !inputs.skip_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Healthcare Compliance Testing
  compliance-testing:
    name: DOH Healthcare Compliance Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || !inputs.skip_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run DOH Compliance Tests
        run: |
          npm run test:doh-compliance
          npm run test:security
          npm run test:accessibility
        env:
          CI: true
          DOH_COMPLIANCE_MODE: strict

      - name: Generate Compliance Report
        run: |
          npm run test:coverage -- --reporter=json-summary --reporter=html
          node scripts/generate-compliance-report.js

      - name: Upload compliance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: compliance-reports
          path: |
            coverage/
            compliance-report.json
            test-results/

  # Comprehensive Testing Suite
  test-suite:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || !inputs.skip_tests
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              npm run test:unit
              ;;
            "integration")
              npm run test:integration
              ;;
            "e2e")
              npm run test:e2e
              ;;
          esac
        env:
          CI: true
          HEALTHCARE_TEST_MODE: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/
            playwright-report/

  # Build and Package
  build:
    name: Build Healthcare Platform
    runs-on: ubuntu-latest
    needs: [security-scan, compliance-testing, test-suite]
    if: always() && (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') && (needs.compliance-testing.result == 'success' || needs.compliance-testing.result == 'skipped') && (needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          npm run build
          npm run build:healthcare-optimized
        env:
          NODE_ENV: production
          HEALTHCARE_BUILD: true
          DOH_COMPLIANCE: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.healthcare
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            HEALTHCARE_BUILD=true
            DOH_COMPLIANCE=true

  # Infrastructure Security Hardening
  infrastructure-security:
    name: Infrastructure Security Hardening
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Infrastructure Security Scan
        run: |
          # Scan Kubernetes manifests
          docker run --rm -v "$PWD":/workspace aquasec/trivy config /workspace/kubernetes/
          
          # Scan Docker images
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image ${{ needs.build.outputs.image-tag }}

      - name: Apply Security Hardening
        run: |
          chmod +x scripts/security-hardening.sh
          ./scripts/security-hardening.sh

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, infrastructure-security]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.reyada-homecare.ae
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name reyada-staging-cluster

      - name: Deploy to Staging
        run: |
          chmod +x scripts/enhanced-blue-green-deploy.sh
          ./scripts/enhanced-blue-green-deploy.sh staging ${{ needs.build.outputs.image-tag }}
        env:
          ENVIRONMENT: staging
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          HEALTHCARE_MODE: true

      - name: Run Health Checks
        run: |
          chmod +x scripts/healthcare-healthcheck.sh
          ./scripts/healthcare-healthcheck.sh staging

      - name: Run Automated Backup
        run: |
          chmod +x scripts/healthcare-backup-automation.sh
          ./scripts/healthcare-backup-automation.sh staging

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, infrastructure-security, deploy-staging]
    if: github.ref == 'refs/heads/production' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment:
      name: production
      url: https://reyada-homecare.ae
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name reyada-production-cluster

      - name: Pre-deployment Health Check
        run: |
          chmod +x scripts/healthcare-healthcheck.sh
          ./scripts/healthcare-healthcheck.sh production

      - name: Create Production Backup
        run: |
          chmod +x scripts/healthcare-backup-automation.sh
          ./scripts/healthcare-backup-automation.sh production backup

      - name: Deploy to Production (Blue-Green)
        run: |
          chmod +x scripts/enhanced-blue-green-deploy.sh
          ./scripts/enhanced-blue-green-deploy.sh production ${{ needs.build.outputs.image-tag }}
        env:
          ENVIRONMENT: production
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          HEALTHCARE_MODE: true
          DOH_COMPLIANCE: true

      - name: Post-deployment Verification
        run: |
          chmod +x scripts/healthcare-healthcheck.sh
          ./scripts/healthcare-healthcheck.sh production verify

      - name: Update Monitoring and Alerting
        run: |
          kubectl apply -f monitoring/prometheus/healthcare-monitoring-config.yaml
          kubectl apply -f monitoring/grafana/healthcare-dashboards.yaml

  # Post-deployment Operations
  post-deployment:
    name: Post-deployment Operations
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Disaster Recovery Test
        run: |
          chmod +x scripts/disaster-recovery.sh
          ./scripts/disaster-recovery.sh test

      - name: Update Documentation
        run: |
          node scripts/generate-deployment-report.js
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/deployment-reports/
          git commit -m "Update deployment documentation [skip ci]" || exit 0
          git push

      - name: Notify Stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#healthcare-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback Capability
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/production' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Execute Emergency Rollback
        run: |
          chmod +x scripts/rollback-enhanced.sh
          ./scripts/rollback-enhanced.sh production emergency

      - name: Verify Rollback Success
        run: |
          chmod +x scripts/healthcare-healthcheck.sh
          ./scripts/healthcare-healthcheck.sh production verify

      - name: Notify Emergency Response Team
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#healthcare-emergency'
          webhook_url: ${{ secrets.SLACK_EMERGENCY_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_EMERGENCY_WEBHOOK }}
