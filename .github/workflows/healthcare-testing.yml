name: Healthcare Platform - Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  HEALTHCARE_TEST_MODE: 'true'
  DOH_COMPLIANCE_CHECK: 'true'
  DAMAN_COMPLIANCE_CHECK: 'true'
  JAWDA_COMPLIANCE_CHECK: 'true'
  HIPAA_COMPLIANCE_CHECK: 'true'

jobs:
  # Quick validation for PRs
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quick-validation-results
        path: test-results/

  # Comprehensive testing for main branch and scheduled runs
  comprehensive-testing:
    name: Comprehensive Healthcare Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        test-suite: 
          - unit
          - integration
          - e2e
          - accessibility
          - security
          - performance
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment
      run: npm run test:setup
      
    - name: Install Playwright browsers
      if: matrix.test-suite == 'e2e' || matrix.test-suite == 'accessibility'
      run: npx playwright install --with-deps
      
    - name: Start development server
      if: matrix.test-suite == 'e2e' || matrix.test-suite == 'accessibility' || matrix.test-suite == 'integration'
      run: |
        npm run dev &
        npx wait-on http://localhost:3001 --timeout 60000
      
    - name: Run Unit Tests
      if: matrix.test-suite == 'unit'
      run: npm run test:unit
      
    - name: Run Integration Tests
      if: matrix.test-suite == 'integration'
      run: npm run test:integration
      
    - name: Run E2E Tests
      if: matrix.test-suite == 'e2e'
      run: npm run test:e2e
      
    - name: Run Accessibility Tests
      if: matrix.test-suite == 'accessibility'
      run: npm run test:accessibility
      
    - name: Run Security Tests
      if: matrix.test-suite == 'security'
      run: npm run test:security
      
    - name: Run Performance Tests
      if: matrix.test-suite == 'performance'
      run: npm run test:performance
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.test-suite }}-test-results
        path: |
          test-results/
          coverage/
          playwright-report/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      if: matrix.test-suite == 'unit' || matrix.test-suite == 'integration'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: ${{ matrix.test-suite }}
        name: codecov-${{ matrix.test-suite }}

  # Load testing (separate job due to resource requirements)
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start development server
      run: |
        npm run dev &
        npx wait-on http://localhost:3001 --timeout 60000
        
    - name: Run load tests
      run: npm run test:load
      
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: test-results/
        retention-days: 30

  # Test orchestration and reporting
  test-orchestration:
    name: Test Orchestration & Reporting
    runs-on: ubuntu-latest
    needs: [comprehensive-testing]
    if: always() && (github.event_name == 'push' || github.event_name == 'schedule')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/
        
    - name: Generate comprehensive report
      run: npm run test:report
      
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: |
          test-results/comprehensive-test-report.json
          test-results/test-report.html
          test-results/junit-report.xml
          test-results/test-summary.csv
        retention-days: 90
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'test-results/test-summary.csv';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            const lines = summary.split('\n');
            const header = lines[0];
            const data = lines.slice(1, 6); // First 5 metrics
            
            const table = [header, ...data]
              .map(line => '| ' + line.split(',').join(' | ') + ' |')
              .join('\n');
              
            const comment = `## 🏥 Healthcare Platform Test Results\n\n${table}\n\n[View detailed report](${context.payload.pull_request.html_url}/checks)`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Quality gate check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, test-orchestration]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-test-report
        path: test-results/
        
    - name: Run quality gate check
      run: npm run quality:gate
      
    - name: Set job status
      if: failure()
      run: |
        echo "Quality gate failed - check test results"
        exit 1

  # Deployment readiness check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download comprehensive report
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-test-report
        path: test-results/
        
    - name: Check deployment readiness
      run: |
        echo "🚀 Checking deployment readiness..."
        
        # Check if comprehensive test report exists
        if [ ! -f "test-results/comprehensive-test-report.json" ]; then
          echo "❌ Comprehensive test report not found"
          exit 1
        fi
        
        echo "✅ All quality checks passed - ready for deployment"
        
    - name: Create deployment marker
      run: |
        echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
        echo "DEPLOYMENT_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        
    outputs:
      deployment-ready: ${{ env.DEPLOYMENT_READY }}
      deployment-timestamp: ${{ env.DEPLOYMENT_TIMESTAMP }}
