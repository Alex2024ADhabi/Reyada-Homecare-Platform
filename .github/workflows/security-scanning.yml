name: Security Scanning & Vulnerability Assessment

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: reyada-homecare/reyada-frontend

jobs:
  # Static Application Security Testing (SAST)
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint Security Plugin
        run: |
          npm install eslint-plugin-security --save-dev
          npx eslint . --ext .js,.jsx,.ts,.tsx --config .eslintrc.security.json --format sarif --output-file eslint-security.sarif || true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-security.sarif

  # Dependency Vulnerability Scanning
  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-report.json

      - name: Run OWASP Dependency Check
        run: |
          docker run --rm \
            -v $(pwd):/src \
            -v $(pwd)/dependency-check-data:/usr/share/dependency-check/data \
            owasp/dependency-check:latest \
            --scan /src \
            --format JSON \
            --format HTML \
            --out /src/dependency-check-report \
            --project "Reyada Healthcare Platform" \
            --enableRetired

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            npm-audit.json
            snyk-report.json
            dependency-check-report/

  # Container Security Scanning
  container-security:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    needs: [dependency-scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          load: true
          tags: reyada-frontend:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'reyada-frontend:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype reyada-frontend:scan -o json > grype-report.json
          grype reyada-frontend:scan -o table

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-security.log || true

      - name: Upload container security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-results
          path: |
            trivy-results.sarif
            grype-report.json
            docker-bench-security.log

  # Dynamic Application Security Testing (DAST)
  dast-analysis:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    services:
      app:
        image: node:18
        ports:
          - 3000:3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and start application
        run: |
          npm run build
          npm run preview &
          sleep 30

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'

      - name: Run Nuclei Security Scanner
        run: |
          docker run --rm --network host \
            -v $(pwd):/nuclei-templates \
            projectdiscovery/nuclei:latest \
            -target http://localhost:3000 \
            -json-export nuclei-report.json \
            -severity medium,high,critical

      - name: Upload DAST results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-results
          path: |
            report_html.html
            report_json.json
            nuclei-report.json

  # Healthcare-Specific Security Testing
  healthcare-security:
    name: Healthcare Security Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: HIPAA Compliance Security Check
        run: |
          echo "Running HIPAA compliance security validation..."
          npm run security:hipaa-compliance || true

      - name: DOH Security Standards Check
        run: |
          echo "Validating DOH security standards..."
          npm run security:doh-standards || true

      - name: Patient Data Protection Validation
        run: |
          echo "Validating patient data protection measures..."
          npm run security:patient-data-protection || true

      - name: Emirates ID Security Validation
        run: |
          echo "Validating Emirates ID security implementation..."
          npm run security:emirates-id-validation || true

      - name: DAMAN Integration Security Check
        run: |
          echo "Validating DAMAN integration security..."
          npm run security:daman-integration || true

      - name: Clinical Data Encryption Validation
        run: |
          echo "Validating clinical data encryption..."
          npm run security:clinical-data-encryption || true

      - name: Generate Healthcare Security Report
        run: |
          npm run generate:healthcare-security-report

      - name: Upload healthcare security results
        uses: actions/upload-artifact@v4
        with:
          name: healthcare-security-results
          path: |
            healthcare-security-report.html
            hipaa-compliance-report.json
            doh-security-report.json
            patient-data-protection-report.json

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Security Scan with Checkov
        run: |
          pip install checkov
          checkov -d terraform/ --framework terraform --output json --output-file checkov-terraform.json || true
          checkov -d kubernetes/ --framework kubernetes --output json --output-file checkov-kubernetes.json || true

      - name: Kubernetes Security Scan with Kubesec
        run: |
          docker run --rm -v $(pwd):/workspace kubesec/kubesec:latest scan /workspace/kubernetes/*.yaml > kubesec-report.json || true

      - name: Docker Security Scan with Hadolint
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile.frontend > hadolint-report.txt || true

      - name: Upload infrastructure security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-security-results
          path: |
            checkov-terraform.json
            checkov-kubernetes.json
            kubesec-report.json
            hadolint-report.txt

  # Security Report Consolidation
  security-report:
    name: Consolidate Security Reports
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scanning, container-security, dast-analysis, healthcare-security, infrastructure-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate consolidated security report
        run: |
          npm run generate:consolidated-security-report

      - name: Calculate security score
        run: |
          npm run calculate:security-score

      - name: Check security thresholds
        run: |
          npm run check:security-thresholds

      - name: Upload consolidated security report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-security-report
          path: |
            consolidated-security-report.html
            security-score.json
            security-summary.json

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const securitySummary = JSON.parse(fs.readFileSync('security-summary.json', 'utf8'));
            
            const comment = `## 🔒 Security Scan Results
            
            **Overall Security Score:** ${securitySummary.overallScore}/100
            
            ### Summary
            - **Critical Issues:** ${securitySummary.critical}
            - **High Issues:** ${securitySummary.high}
            - **Medium Issues:** ${securitySummary.medium}
            - **Low Issues:** ${securitySummary.low}
            
            ### Healthcare Compliance
            - **HIPAA Compliance:** ${securitySummary.hipaaCompliant ? '✅' : '❌'}
            - **DOH Standards:** ${securitySummary.dohCompliant ? '✅' : '❌'}
            - **Patient Data Protection:** ${securitySummary.patientDataProtected ? '✅' : '❌'}
            
            [View Full Security Report](${securitySummary.reportUrl})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Notify security team
        if: failure() || (success() && contains(github.event.head_commit.message, '[security-alert]'))
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "text": "🚨 Security scan completed with issues",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Repository", "value": "${{ github.repository }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Run ID", "value": "${{ github.run_id }}", "short": true}
                ]
              }]
            }
