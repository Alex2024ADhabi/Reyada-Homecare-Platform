name: Healthcare Platform CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: reyada-homecare
  HEALTHCARE_TEST_MODE: 'ci'
  DOH_COMPLIANCE_CHECK: 'true'
  HIPAA_VALIDATION: 'true'
  DAMAN_INTEGRATION_TEST: 'mock'

jobs:
  # Healthcare Compliance Pre-Check
  compliance-check:
    name: Healthcare Compliance Validation
    runs-on: ubuntu-latest
    outputs:
      doh-compliant: ${{ steps.doh-check.outputs.compliant }}
      hipaa-compliant: ${{ steps.hipaa-check.outputs.compliant }}
      gdpr-compliant: ${{ steps.gdpr-check.outputs.compliant }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: DOH Compliance Check
        id: doh-check
        run: |
          echo "Running DOH compliance validation..."
          npm run test:compliance:doh
          echo "compliant=true" >> $GITHUB_OUTPUT

      - name: HIPAA Compliance Check
        id: hipaa-check
        run: |
          echo "Running HIPAA compliance validation..."
          npm run test:compliance:hipaa
          echo "compliant=true" >> $GITHUB_OUTPUT

      - name: GDPR Compliance Check
        id: gdpr-check
        run: |
          echo "Running GDPR compliance validation..."
          npm run test:compliance:gdpr
          echo "compliant=true" >> $GITHUB_OUTPUT

      - name: Generate Compliance Report
        run: |
          mkdir -p compliance-reports
          echo "DOH Compliant: ${{ steps.doh-check.outputs.compliant }}" > compliance-reports/summary.txt
          echo "HIPAA Compliant: ${{ steps.hipaa-check.outputs.compliant }}" >> compliance-reports/summary.txt
          echo "GDPR Compliant: ${{ steps.gdpr-check.outputs.compliant }}" >> compliance-reports/summary.txt

      - name: Upload Compliance Report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-reports/

  # Code Quality and Security
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    needs: compliance-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type checking
        run: npm run type-check

      - name: Security audit
        run: |
          npm audit --audit-level=high
          npm run security:scan

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'reyada-homecare'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: reports/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=reyada-homecare
            -Dsonar.organization=reyada-healthcare
            -Dsonar.sources=src
            -Dsonar.tests=src/test
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/test/**

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: compliance-check
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          HEALTHCARE_TEST_MODE: unit
          DOH_COMPLIANCE_CHECK: true
          HIPAA_VALIDATION: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./test-results/coverage/unit/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}
          path: test-results/unit/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [compliance-check, unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: reyada_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/reyada_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/reyada_test
          REDIS_URL: redis://localhost:6379
          HEALTHCARE_TEST_MODE: integration
          DOH_COMPLIANCE_CHECK: true
          DAMAN_INTEGRATION_TEST: mock

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/integration/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [compliance-check, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start:test &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          HEALTHCARE_TEST_MODE: e2e
          DOH_COMPLIANCE_CHECK: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/playwright-report/

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: test-results/playwright-artifacts/

  # Security Tests
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: [compliance-check, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application for security testing
        run: |
          npm run start:test &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'

      - name: Run Security Tests
        run: npm run test:security
        env:
          BASE_URL: http://localhost:3000

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: test-results/security/

  # Performance Tests
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [compliance-check, e2e-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Build application
        run: npm run build

      - name: Start application for performance testing
        run: |
          npm run start:test &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run K6 Load Tests
        run: k6 run src/test/load/k6-enhanced-load-test.js
        env:
          BASE_URL: http://localhost:3000

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-results/performance/

  # Build and Push Docker Image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            HEALTHCARE_COMPLIANCE=true
            DOH_VALIDATION=true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Healthcare Compliance Final Validation
  final-compliance-check:
    name: Final Healthcare Compliance Validation
    runs-on: ubuntu-latest
    needs: [security-tests, performance-tests, build-image]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Validate DOH Compliance
        run: |
          echo "Validating DOH compliance across all test results..."
          if [ "${{ needs.compliance-check.outputs.doh-compliant }}" != "true" ]; then
            echo "❌ DOH compliance check failed"
            exit 1
          fi
          echo "✅ DOH compliance validated"

      - name: Validate HIPAA Compliance
        run: |
          echo "Validating HIPAA compliance across all test results..."
          if [ "${{ needs.compliance-check.outputs.hipaa-compliant }}" != "true" ]; then
            echo "❌ HIPAA compliance check failed"
            exit 1
          fi
          echo "✅ HIPAA compliance validated"

      - name: Validate GDPR Compliance
        run: |
          echo "Validating GDPR compliance across all test results..."
          if [ "${{ needs.compliance-check.outputs.gdpr-compliant }}" != "true" ]; then
            echo "❌ GDPR compliance check failed"
            exit 1
          fi
          echo "✅ GDPR compliance validated"

      - name: Generate Final Compliance Report
        run: |
          mkdir -p final-compliance-report
          echo "# Healthcare Platform Compliance Report" > final-compliance-report/README.md
          echo "" >> final-compliance-report/README.md
          echo "## Compliance Status" >> final-compliance-report/README.md
          echo "- DOH Compliant: ✅" >> final-compliance-report/README.md
          echo "- HIPAA Compliant: ✅" >> final-compliance-report/README.md
          echo "- GDPR Compliant: ✅" >> final-compliance-report/README.md
          echo "" >> final-compliance-report/README.md
          echo "## Test Results Summary" >> final-compliance-report/README.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> final-compliance-report/README.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> final-compliance-report/README.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> final-compliance-report/README.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> final-compliance-report/README.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> final-compliance-report/README.md
          echo "" >> final-compliance-report/README.md
          echo "Generated on: $(date)" >> final-compliance-report/README.md
          echo "Commit: ${{ github.sha }}" >> final-compliance-report/README.md
          echo "Branch: ${{ github.ref_name }}" >> final-compliance-report/README.md

      - name: Upload Final Compliance Report
        uses: actions/upload-artifact@v4
        with:
          name: final-compliance-report
          path: final-compliance-report/

      - name: Notify on Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#healthcare-ci'
          text: |
            Healthcare Platform CI Pipeline Completed
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            DOH Compliance: ${{ needs.compliance-check.outputs.doh-compliant == 'true' && '✅' || '❌' }}
            HIPAA Compliance: ${{ needs.compliance-check.outputs.hipaa-compliant == 'true' && '✅' || '❌' }}
            GDPR Compliance: ${{ needs.compliance-check.outputs.gdpr-compliant == 'true' && '✅' || '❌' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
