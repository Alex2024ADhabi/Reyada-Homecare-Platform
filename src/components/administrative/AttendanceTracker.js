import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Calendar, Clock, Users, TrendingUp, AlertCircle, CheckCircle, XCircle, } from "lucide-react";
import { getAttendanceRecords, clockIn, clockOut, getAttendanceAnalytics, } from "@/api/attendance.api";
import { useOfflineSync } from "@/hooks/useOfflineSync";
export default function AttendanceTracker({ employeeId = "EMP001", isManager = true, }) {
    const [attendanceRecords, setAttendanceRecords] = useState([]);
    const [analytics, setAnalytics] = useState(null);
    const [loading, setLoading] = useState(false);
    const [clockInLocation, setClockInLocation] = useState("");
    const [clockInNotes, setClockInNotes] = useState("");
    const [filters, setFilters] = useState({
        date_from: new Date().toISOString().split("T")[0],
        date_to: new Date().toISOString().split("T")[0],
    });
    const [todaysRecord, setTodaysRecord] = useState(null);
    const [emergencyStaffing, setEmergencyStaffing] = useState({
        onCallStaff: 8,
        availableForEmergency: 12,
        currentEmergencies: 2,
        averageResponseTime: 15, // minutes
    });
    const [schedulingOptimization, setSchedulingOptimization] = useState({
        optimizedShifts: 0,
        constraintViolations: 0,
        efficiencyGain: 0,
        costSavings: 0,
    });
    const { isOnline, saveFormData } = useOfflineSync();
    useEffect(() => {
        loadAttendanceData();
        loadAnalytics();
        checkTodaysRecord();
    }, [filters]);
    const loadAttendanceData = async () => {
        try {
            setLoading(true);
            const records = await getAttendanceRecords(filters);
            setAttendanceRecords(records);
        }
        catch (error) {
            console.error("Error loading attendance data:", error);
        }
        finally {
            setLoading(false);
        }
    };
    const loadAnalytics = async () => {
        try {
            const analyticsData = await getAttendanceAnalytics({
                department: filters.department,
                date_from: filters.date_from,
                date_to: filters.date_to,
            });
            setAnalytics(analyticsData);
        }
        catch (error) {
            console.error("Error loading analytics:", error);
        }
    };
    const checkTodaysRecord = async () => {
        try {
            const today = new Date().toISOString().split("T")[0];
            const records = await getAttendanceRecords({
                employee_id: employeeId,
                date_from: today,
                date_to: today,
            });
            setTodaysRecord(records.length > 0 ? records[0] : null);
        }
        catch (error) {
            console.error("Error checking today's record:", error);
        }
    };
    const handleClockIn = async () => {
        try {
            setLoading(true);
            const record = await clockIn(employeeId, clockInLocation, clockInNotes);
            // Save to offline storage if offline
            if (!isOnline) {
                await saveFormData("attendance", {
                    type: "clock_in",
                    employee_id: employeeId,
                    location: clockInLocation,
                    notes: clockInNotes,
                    timestamp: new Date().toISOString(),
                });
            }
            setTodaysRecord(record);
            setClockInLocation("");
            setClockInNotes("");
            await loadAttendanceData();
        }
        catch (error) {
            console.error("Error clocking in:", error);
            alert(error instanceof Error ? error.message : "Failed to clock in");
        }
        finally {
            setLoading(false);
        }
    };
    const handleClockOut = async () => {
        try {
            setLoading(true);
            const record = await clockOut(employeeId, clockInNotes);
            // Save to offline storage if offline
            if (!isOnline) {
                await saveFormData("attendance", {
                    type: "clock_out",
                    employee_id: employeeId,
                    notes: clockInNotes,
                    timestamp: new Date().toISOString(),
                });
            }
            setTodaysRecord(record);
            setClockInNotes("");
            await loadAttendanceData();
        }
        catch (error) {
            console.error("Error clocking out:", error);
            alert(error instanceof Error ? error.message : "Failed to clock out");
        }
        finally {
            setLoading(false);
        }
    };
    const getStatusBadge = (status) => {
        const variants = {
            present: "default",
            absent: "destructive",
            late: "secondary",
            half_day: "outline",
            sick_leave: "secondary",
            vacation: "outline",
        };
        return (_jsx(Badge, { variant: variants[status] || "outline", children: status.replace("_", " ") }));
    };
    const getApprovalBadge = (approval) => {
        const variants = {
            approved: "default",
            pending: "secondary",
            rejected: "destructive",
        };
        const icons = {
            approved: _jsx(CheckCircle, { className: "w-3 h-3" }),
            pending: _jsx(Clock, { className: "w-3 h-3" }),
            rejected: _jsx(XCircle, { className: "w-3 h-3" }),
        };
        return (_jsxs(Badge, { variant: variants[approval] || "secondary", className: "flex items-center gap-1", children: [icons[approval], approval] }));
    };
    return (_jsx("div", { className: "min-h-screen bg-gray-50 p-6", children: _jsxs("div", { className: "max-w-7xl mx-auto space-y-6", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold text-gray-900", children: "Attendance Tracker" }), _jsx("p", { className: "text-gray-600 mt-1", children: "Track and manage staff attendance with real-time monitoring" })] }), _jsx("div", { className: "flex items-center gap-2", children: !isOnline && (_jsxs(Badge, { variant: "secondary", className: "flex items-center gap-1", children: [_jsx(AlertCircle, { className: "w-3 h-3" }), "Offline Mode"] })) })] }), _jsxs(Tabs, { defaultValue: "clock", className: "space-y-6", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-6", children: [_jsx(TabsTrigger, { value: "clock", children: "Clock In/Out" }), _jsx(TabsTrigger, { value: "records", children: "Attendance Records" }), _jsx(TabsTrigger, { value: "scheduling", children: "Smart Scheduling" }), _jsx(TabsTrigger, { value: "emergency", children: "Emergency Staffing" }), _jsx(TabsTrigger, { value: "analytics", children: "Analytics" }), _jsx(TabsTrigger, { value: "reports", children: "Reports" })] }), _jsx(TabsContent, { value: "clock", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Clock, { className: "w-5 h-5" }), "Time Clock"] }), _jsx(CardDescription, { children: "Clock in and out for your shift" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "text-center p-4 bg-gray-50 rounded-lg", children: [_jsx("div", { className: "text-2xl font-bold text-gray-900", children: new Date().toLocaleTimeString() }), _jsx("div", { className: "text-sm text-gray-600", children: new Date().toLocaleDateString() })] }), !todaysRecord?.actual_start ? (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "location", children: "Location" }), _jsx(Input, { id: "location", value: clockInLocation, onChange: (e) => setClockInLocation(e.target.value), placeholder: "Enter your location" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "notes", children: "Notes (Optional)" }), _jsx(Input, { id: "notes", value: clockInNotes, onChange: (e) => setClockInNotes(e.target.value), placeholder: "Any additional notes" })] }), _jsx(Button, { onClick: handleClockIn, disabled: loading || !clockInLocation, className: "w-full", size: "lg", children: loading ? "Clocking In..." : "Clock In" })] })) : !todaysRecord?.actual_end ? (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "p-3 bg-green-50 border border-green-200 rounded-lg", children: [_jsxs("div", { className: "text-sm font-medium text-green-800", children: ["Clocked in at ", todaysRecord.actual_start] }), _jsxs("div", { className: "text-xs text-green-600", children: ["Location: ", todaysRecord.location] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "clockOutNotes", children: "Notes (Optional)" }), _jsx(Input, { id: "clockOutNotes", value: clockInNotes, onChange: (e) => setClockInNotes(e.target.value), placeholder: "Any additional notes" })] }), _jsx(Button, { onClick: handleClockOut, disabled: loading, className: "w-full", size: "lg", variant: "destructive", children: loading ? "Clocking Out..." : "Clock Out" })] })) : (_jsxs("div", { className: "p-3 bg-blue-50 border border-blue-200 rounded-lg", children: [_jsx("div", { className: "text-sm font-medium text-blue-800", children: "Shift Complete" }), _jsxs("div", { className: "text-xs text-blue-600", children: [todaysRecord.actual_start, " - ", todaysRecord.actual_end] }), _jsxs("div", { className: "text-xs text-blue-600", children: ["Total Hours: ", todaysRecord.total_hours] })] }))] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-5 h-5" }), "Today's Status"] }) }), _jsx(CardContent, { children: todaysRecord ? (_jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm text-gray-600", children: "Status:" }), getStatusBadge(todaysRecord.status)] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm text-gray-600", children: "Shift:" }), _jsx("span", { className: "font-medium", children: todaysRecord.shift })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm text-gray-600", children: "Scheduled:" }), _jsxs("span", { className: "font-medium", children: [todaysRecord.scheduled_start, " -", " ", todaysRecord.scheduled_end] })] }), todaysRecord.actual_start && (_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm text-gray-600", children: "Actual:" }), _jsxs("span", { className: "font-medium", children: [todaysRecord.actual_start, todaysRecord.actual_end &&
                                                                            ` - ${todaysRecord.actual_end}`] })] })), todaysRecord.late_arrival && (_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm text-gray-600", children: "Late by:" }), _jsxs(Badge, { variant: "secondary", children: [todaysRecord.late_minutes, " minutes"] })] })), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm text-gray-600", children: "Approval:" }), getApprovalBadge(todaysRecord.supervisor_approval)] })] })) : (_jsx("div", { className: "text-center text-gray-500 py-4", children: "No attendance record for today" })) })] })] }) }), _jsxs(TabsContent, { value: "records", className: "space-y-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Filter Records" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "dateFrom", children: "From Date" }), _jsx(Input, { id: "dateFrom", type: "date", value: filters.date_from || "", onChange: (e) => setFilters({ ...filters, date_from: e.target.value }) })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "dateTo", children: "To Date" }), _jsx(Input, { id: "dateTo", type: "date", value: filters.date_to || "", onChange: (e) => setFilters({ ...filters, date_to: e.target.value }) })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "department", children: "Department" }), _jsxs(Select, { value: filters.department || "", onValueChange: (value) => setFilters({ ...filters, department: value }), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "All Departments" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "", children: "All Departments" }), _jsx(SelectItem, { value: "Nursing", children: "Nursing" }), _jsx(SelectItem, { value: "Therapy", children: "Therapy" }), _jsx(SelectItem, { value: "Administration", children: "Administration" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "status", children: "Status" }), _jsxs(Select, { value: filters.status || "", onValueChange: (value) => setFilters({ ...filters, status: value }), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "All Status" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "", children: "All Status" }), _jsx(SelectItem, { value: "present", children: "Present" }), _jsx(SelectItem, { value: "absent", children: "Absent" }), _jsx(SelectItem, { value: "late", children: "Late" }), _jsx(SelectItem, { value: "sick_leave", children: "Sick Leave" }), _jsx(SelectItem, { value: "vacation", children: "Vacation" })] })] })] })] }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Attendance Records" }), _jsxs(CardDescription, { children: [attendanceRecords.length, " records found"] })] }), _jsx(CardContent, { children: _jsx("div", { className: "overflow-x-auto", children: _jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { children: [_jsx(TableHead, { children: "Employee" }), _jsx(TableHead, { children: "Date" }), _jsx(TableHead, { children: "Shift" }), _jsx(TableHead, { children: "Scheduled" }), _jsx(TableHead, { children: "Actual" }), _jsx(TableHead, { children: "Hours" }), _jsx(TableHead, { children: "Status" }), _jsx(TableHead, { children: "Approval" })] }) }), _jsx(TableBody, { children: loading ? (_jsx(TableRow, { children: _jsx(TableCell, { colSpan: 8, className: "text-center py-4", children: "Loading..." }) })) : attendanceRecords.length === 0 ? (_jsx(TableRow, { children: _jsx(TableCell, { colSpan: 8, className: "text-center py-4 text-gray-500", children: "No records found" }) })) : (attendanceRecords.map((record) => (_jsxs(TableRow, { children: [_jsx(TableCell, { children: _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: record.employee_name }), _jsx("div", { className: "text-sm text-gray-500", children: record.role })] }) }), _jsx(TableCell, { children: record.date }), _jsx(TableCell, { children: record.shift }), _jsxs(TableCell, { children: [record.scheduled_start, " - ", record.scheduled_end] }), _jsxs(TableCell, { children: [record.actual_start || "--", record.actual_end && ` - ${record.actual_end}`] }), _jsx(TableCell, { children: _jsxs("div", { children: [_jsxs("div", { children: [record.total_hours, "h"] }), record.overtime_hours > 0 && (_jsxs("div", { className: "text-xs text-orange-600", children: ["+", record.overtime_hours, "h OT"] }))] }) }), _jsx(TableCell, { children: getStatusBadge(record.status) }), _jsx(TableCell, { children: getApprovalBadge(record.supervisor_approval) })] }, record._id?.toString())))) })] }) }) })] })] }), _jsx(TabsContent, { value: "scheduling", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-5 h-5" }), "Staff Scheduling Optimization with Constraint Management"] }), _jsx(CardDescription, { children: "AI-powered scheduling with constraint management and optimization" })] }), _jsxs(CardContent, { children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6", children: [_jsxs(Card, { className: "border-blue-200 bg-blue-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-blue-800", children: "Optimized Shifts" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-blue-900", children: schedulingOptimization.optimizedShifts }), _jsx("p", { className: "text-xs text-blue-600", children: "This week" })] })] }), _jsxs(Card, { className: "border-green-200 bg-green-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-green-800", children: "Efficiency Gain" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold text-green-900", children: [schedulingOptimization.efficiencyGain, "%"] }), _jsx("p", { className: "text-xs text-green-600", children: "vs manual scheduling" })] })] }), _jsxs(Card, { className: "border-orange-200 bg-orange-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-orange-800", children: "Constraint Violations" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-orange-900", children: schedulingOptimization.constraintViolations }), _jsx("p", { className: "text-xs text-orange-600", children: "Require attention" })] })] }), _jsxs(Card, { className: "border-purple-200 bg-purple-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-purple-800", children: "Cost Savings" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold text-purple-900", children: ["AED", " ", schedulingOptimization.costSavings.toLocaleString()] }), _jsx("p", { className: "text-xs text-purple-600", children: "Monthly savings" })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Scheduling Constraints" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Maximum consecutive days:" }), _jsx(Badge, { variant: "outline", children: "7 days" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Minimum rest between shifts:" }), _jsx(Badge, { variant: "outline", children: "12 hours" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Maximum overtime per week:" }), _jsx(Badge, { variant: "outline", children: "16 hours" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Skill-based matching:" }), _jsx(Badge, { variant: "default", children: "Enabled" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Geographic optimization:" }), _jsx(Badge, { variant: "default", children: "Enabled" })] })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Optimization Results" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Travel time reduction:" }), _jsx("span", { className: "text-sm font-medium text-green-600", children: "-23%" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Overtime reduction:" }), _jsx("span", { className: "text-sm font-medium text-green-600", children: "-18%" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Staff satisfaction:" }), _jsx("span", { className: "text-sm font-medium text-blue-600", children: "+15%" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Patient coverage:" }), _jsx("span", { className: "text-sm font-medium text-blue-600", children: "98.5%" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Skill match accuracy:" }), _jsx("span", { className: "text-sm font-medium text-blue-600", children: "94.2%" })] })] }) })] })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Weekly Schedule Optimization" }), _jsx(CardDescription, { children: "AI-generated optimal schedule for next week" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "overflow-x-auto", children: _jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { children: [_jsx(TableHead, { children: "Staff Member" }), _jsx(TableHead, { children: "Monday" }), _jsx(TableHead, { children: "Tuesday" }), _jsx(TableHead, { children: "Wednesday" }), _jsx(TableHead, { children: "Thursday" }), _jsx(TableHead, { children: "Friday" }), _jsx(TableHead, { children: "Saturday" }), _jsx(TableHead, { children: "Sunday" })] }) }), _jsxs(TableBody, { children: [_jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: "Sarah Johnson" }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Morning" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Morning" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "secondary", children: "Off" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Morning" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Morning" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "outline", children: "Evening" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "secondary", children: "Off" }) })] }), _jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: "Ahmed Al Mansouri" }), _jsx(TableCell, { children: _jsx(Badge, { variant: "outline", children: "Evening" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "secondary", children: "Off" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Morning" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "outline", children: "Evening" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Morning" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Morning" }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: "secondary", children: "Off" }) })] })] })] }) }), _jsxs("div", { className: "mt-4 flex justify-end space-x-2", children: [_jsxs(Button, { variant: "outline", children: [_jsx(RefreshCw, { className: "w-4 h-4 mr-2" }), "Re-optimize"] }), _jsxs(Button, { children: [_jsx(CheckCircle, { className: "w-4 h-4 mr-2" }), "Approve Schedule"] })] })] })] })] })] })] }) }), _jsx(TabsContent, { value: "emergency", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(AlertTriangle, { className: "w-5 h-5" }), "Emergency Staffing Protocols & On-Call Management"] }), _jsx(CardDescription, { children: "Manage emergency staffing and on-call schedules" })] }), _jsxs(CardContent, { children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6", children: [_jsxs(Card, { className: "border-red-200 bg-red-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-red-800", children: "Current Emergencies" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-red-900", children: emergencyStaffing.currentEmergencies }), _jsx("p", { className: "text-xs text-red-600", children: "Active cases" })] })] }), _jsxs(Card, { className: "border-blue-200 bg-blue-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-blue-800", children: "On-Call Staff" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-blue-900", children: emergencyStaffing.onCallStaff }), _jsx("p", { className: "text-xs text-blue-600", children: "Available now" })] })] }), _jsxs(Card, { className: "border-green-200 bg-green-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-green-800", children: "Emergency Available" }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-green-900", children: emergencyStaffing.availableForEmergency }), _jsx("p", { className: "text-xs text-green-600", children: "Can be called in" })] })] }), _jsxs(Card, { className: "border-purple-200 bg-purple-50", children: [_jsx(CardHeader, { className: "pb-2", children: _jsx(CardTitle, { className: "text-sm font-medium text-purple-800", children: "Avg Response Time" }) }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold text-purple-900", children: [emergencyStaffing.averageResponseTime, "m"] }), _jsx("p", { className: "text-xs text-purple-600", children: "Last 30 days" })] })] })] }), _jsxs("div", { className: "space-y-6", children: [_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "On-Call Schedule" }), _jsx(CardDescription, { children: "Current on-call staff assignments" })] }), _jsx(CardContent, { children: _jsx("div", { className: "overflow-x-auto", children: _jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { children: [_jsx(TableHead, { children: "Staff Member" }), _jsx(TableHead, { children: "Role" }), _jsx(TableHead, { children: "On-Call Period" }), _jsx(TableHead, { children: "Specialization" }), _jsx(TableHead, { children: "Contact" }), _jsx(TableHead, { children: "Status" })] }) }), _jsxs(TableBody, { children: [_jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: "Dr. Sarah Ahmed" }), _jsx(TableCell, { children: "Senior Nurse" }), _jsx(TableCell, { children: "Today 18:00 - Tomorrow 08:00" }), _jsx(TableCell, { children: "Critical Care" }), _jsx(TableCell, { children: "+971-50-123-4567" }), _jsx(TableCell, { children: _jsx(Badge, { variant: "default", children: "Available" }) })] }), _jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: "Ahmed Al Mansouri" }), _jsx(TableCell, { children: "Physical Therapist" }), _jsx(TableCell, { children: "Tomorrow 08:00 - 18:00" }), _jsx(TableCell, { children: "Rehabilitation" }), _jsx(TableCell, { children: "+971-50-987-6543" }), _jsx(TableCell, { children: _jsx(Badge, { variant: "secondary", children: "Scheduled" }) })] }), _jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: "Maria Garcia" }), _jsx(TableCell, { children: "Occupational Therapist" }), _jsx(TableCell, { children: "Weekend Coverage" }), _jsx(TableCell, { children: "Pediatric Care" }), _jsx(TableCell, { children: "+971-50-555-0123" }), _jsx(TableCell, { children: _jsx(Badge, { variant: "outline", children: "Backup" }) })] })] })] }) }) })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Emergency Response Protocols" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "p-3 border rounded-lg", children: [_jsx("div", { className: "font-medium text-sm mb-1", children: "Level 1 - Critical" }), _jsx("div", { className: "text-xs text-gray-600", children: "Life-threatening situations requiring immediate response" }), _jsx("div", { className: "text-xs text-blue-600 mt-1", children: "Response time: < 15 minutes" })] }), _jsxs("div", { className: "p-3 border rounded-lg", children: [_jsx("div", { className: "font-medium text-sm mb-1", children: "Level 2 - Urgent" }), _jsx("div", { className: "text-xs text-gray-600", children: "Serious conditions requiring prompt attention" }), _jsx("div", { className: "text-xs text-blue-600 mt-1", children: "Response time: < 30 minutes" })] }), _jsxs("div", { className: "p-3 border rounded-lg", children: [_jsx("div", { className: "font-medium text-sm mb-1", children: "Level 3 - Standard" }), _jsx("div", { className: "text-xs text-gray-600", children: "Non-urgent situations requiring same-day response" }), _jsx("div", { className: "text-xs text-blue-600 mt-1", children: "Response time: < 2 hours" })] })] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Recent Emergency Calls" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "p-3 bg-red-50 border border-red-200 rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-1", children: [_jsx("div", { className: "font-medium text-sm", children: "Critical - Respiratory Distress" }), _jsx(Badge, { variant: "destructive", children: "Level 1" })] }), _jsx("div", { className: "text-xs text-gray-600", children: "Patient: John Doe \u2022 Responded by: Sarah Johnson" }), _jsx("div", { className: "text-xs text-gray-500 mt-1", children: "Response time: 12 minutes \u2022 Status: Resolved" })] }), _jsxs("div", { className: "p-3 bg-yellow-50 border border-yellow-200 rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-1", children: [_jsx("div", { className: "font-medium text-sm", children: "Urgent - Medication Issue" }), _jsx(Badge, { variant: "secondary", children: "Level 2" })] }), _jsx("div", { className: "text-xs text-gray-600", children: "Patient: Jane Smith \u2022 Responded by: Ahmed Al Mansouri" }), _jsx("div", { className: "text-xs text-gray-500 mt-1", children: "Response time: 25 minutes \u2022 Status: Resolved" })] }), _jsxs("div", { className: "p-3 bg-blue-50 border border-blue-200 rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-1", children: [_jsx("div", { className: "font-medium text-sm", children: "Standard - Equipment Request" }), _jsx(Badge, { variant: "outline", children: "Level 3" })] }), _jsx("div", { className: "text-xs text-gray-600", children: "Patient: Bob Wilson \u2022 Responded by: Maria Garcia" }), _jsx("div", { className: "text-xs text-gray-500 mt-1", children: "Response time: 1.5 hours \u2022 Status: Completed" })] })] }) })] })] })] })] })] }) }), _jsx(TabsContent, { value: "analytics", className: "space-y-6", children: analytics && (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", children: [_jsxs(Card, { children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Total Records" }), _jsx(Users, { className: "h-4 w-4 text-muted-foreground" })] }), _jsx(CardContent, { children: _jsx("div", { className: "text-2xl font-bold", children: analytics.total_records }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Attendance Rate" }), _jsx(TrendingUp, { className: "h-4 w-4 text-muted-foreground" })] }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: [Math.round(analytics.attendance_rate), "%"] }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Punctuality Rate" }), _jsx(Clock, { className: "h-4 w-4 text-muted-foreground" })] }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: [Math.round(analytics.punctuality_rate), "%"] }) })] }), _jsxs(Card, { children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Avg Hours" }), _jsx(Clock, { className: "h-4 w-4 text-muted-foreground" })] }), _jsx(CardContent, { children: _jsxs("div", { className: "text-2xl font-bold", children: [Math.round(analytics.average_hours * 10) / 10, "h"] }) })] })] })) }), _jsx(TabsContent, { value: "reports", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Generate Reports" }), _jsx(CardDescription, { children: "Generate attendance reports for payroll and management" })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs(Button, { variant: "outline", className: "h-20 flex flex-col items-center gap-2", children: [_jsx(Calendar, { className: "w-6 h-6" }), _jsx("span", { children: "Daily Report" })] }), _jsxs(Button, { variant: "outline", className: "h-20 flex flex-col items-center gap-2", children: [_jsx(TrendingUp, { className: "w-6 h-6" }), _jsx("span", { children: "Weekly Summary" })] }), _jsxs(Button, { variant: "outline", className: "h-20 flex flex-col items-center gap-2", children: [_jsx(Users, { className: "w-6 h-6" }), _jsx("span", { children: "Monthly Report" })] })] }) })] }) })] })] }) }));
}
