import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Activity, AlertTriangle, CheckCircle, Clock, TrendingUp, TrendingDown, Zap, Shield, Database, Network, Server, RefreshCw, Bell, Target, BarChart3, LineChart, PieChart, } from "lucide-react";
const IntegrationIntelligenceDashboard = () => {
    const [healthReport, setHealthReport] = useState(null);
    const [analytics, setAnalytics] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedSystem, setSelectedSystem] = useState("all");
    const [refreshing, setRefreshing] = useState(false);
    useEffect(() => {
        loadDashboardData();
    }, []);
    const loadDashboardData = async () => {
        try {
            setLoading(true);
            setError(null);
            // Initialize data if needed
            await fetch("/api/integration-intelligence/initialize", {
                method: "POST",
            });
            // Load health report and analytics
            const [healthResponse, analyticsResponse] = await Promise.all([
                fetch("/api/integration-intelligence/health"),
                fetch("/api/integration-intelligence/analytics"),
            ]);
            if (!healthResponse.ok || !analyticsResponse.ok) {
                throw new Error("Failed to load dashboard data");
            }
            const healthData = await healthResponse.json();
            const analyticsData = await analyticsResponse.json();
            setHealthReport(healthData);
            setAnalytics(analyticsData);
        }
        catch (err) {
            setError(err instanceof Error ? err.message : "An error occurred");
        }
        finally {
            setLoading(false);
        }
    };
    const refreshData = async () => {
        setRefreshing(true);
        await loadDashboardData();
        setRefreshing(false);
    };
    const getStatusColor = (status) => {
        switch (status) {
            case "healthy":
                return "text-green-600 bg-green-50";
            case "degraded":
                return "text-yellow-600 bg-yellow-50";
            case "critical":
                return "text-red-600 bg-red-50";
            case "offline":
                return "text-gray-600 bg-gray-50";
            default:
                return "text-gray-600 bg-gray-50";
        }
    };
    const getSeverityColor = (severity) => {
        switch (severity) {
            case "critical":
                return "text-red-600 bg-red-50";
            case "high":
                return "text-orange-600 bg-orange-50";
            case "medium":
                return "text-yellow-600 bg-yellow-50";
            case "low":
                return "text-blue-600 bg-blue-50";
            default:
                return "text-gray-600 bg-gray-50";
        }
    };
    const getTrendIcon = (trend) => {
        switch (trend) {
            case "improving":
                return _jsx(TrendingUp, { className: "h-4 w-4 text-green-600" });
            case "degrading":
                return _jsx(TrendingDown, { className: "h-4 w-4 text-red-600" });
            default:
                return _jsx(Activity, { className: "h-4 w-4 text-blue-600" });
        }
    };
    if (loading) {
        return (_jsx("div", { className: "flex items-center justify-center h-96 bg-white", children: _jsxs("div", { className: "text-center", children: [_jsx(RefreshCw, { className: "h-8 w-8 animate-spin mx-auto mb-4 text-blue-600" }), _jsx("p", { className: "text-gray-600", children: "Loading Integration Intelligence Dashboard..." })] }) }));
    }
    if (error) {
        return (_jsx("div", { className: "p-6 bg-white", children: _jsxs(Alert, { className: "border-red-200 bg-red-50", children: [_jsx(AlertTriangle, { className: "h-4 w-4 text-red-600" }), _jsx(AlertTitle, { className: "text-red-800", children: "Error Loading Dashboard" }), _jsxs(AlertDescription, { className: "text-red-700", children: [error, _jsx(Button, { onClick: loadDashboardData, variant: "outline", size: "sm", className: "ml-4", children: "Retry" })] })] }) }));
    }
    if (!healthReport || !analytics) {
        return (_jsx("div", { className: "p-6 bg-white", children: _jsxs(Alert, { children: [_jsx(AlertTriangle, { className: "h-4 w-4" }), _jsx(AlertTitle, { children: "No Data Available" }), _jsx(AlertDescription, { children: "Integration intelligence data is not available. Please check your system configuration." })] }) }));
    }
    const filteredSystems = selectedSystem === "all"
        ? healthReport.individualSystemHealth
        : healthReport.individualSystemHealth.filter((system) => system.systemId === selectedSystem);
    const criticalAlerts = healthReport.alertsAndNotifications.filter((alert) => alert.severity === "critical");
    const highPriorityActions = healthReport.recommendedActions.filter((action) => action.priority === "critical" || action.priority === "high");
    return (_jsxs("div", { className: "p-6 space-y-6 bg-gray-50 min-h-screen", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold text-gray-900", children: "Integration Intelligence Dashboard" }), _jsx("p", { className: "text-gray-600 mt-1", children: "Advanced System Integration Monitoring & Optimization Platform" })] }), _jsxs("div", { className: "flex space-x-3", children: [_jsxs(Button, { onClick: refreshData, disabled: refreshing, variant: "outline", className: "flex items-center space-x-2", children: [_jsx(RefreshCw, { className: `h-4 w-4 ${refreshing ? "animate-spin" : ""}` }), _jsx("span", { children: "Refresh" })] }), _jsxs(Badge, { variant: "outline", className: "px-3 py-1", children: ["Last Updated:", " ", new Date(healthReport.timestamp).toLocaleTimeString()] })] })] }), criticalAlerts.length > 0 && (_jsxs(Alert, { className: "border-red-200 bg-red-50", children: [_jsx(AlertTriangle, { className: "h-4 w-4 text-red-600" }), _jsx(AlertTitle, { className: "text-red-800", children: "Critical Alerts Detected" }), _jsxs(AlertDescription, { className: "text-red-700", children: [criticalAlerts.length, " critical alert", criticalAlerts.length > 1 ? "s" : "", " require immediate attention."] })] })), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", children: [_jsxs(Card, { className: "bg-white", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Overall Health Score" }), _jsx(Shield, { className: "h-4 w-4 text-blue-600" })] }), _jsxs(CardContent, { children: [_jsxs("div", { className: "text-2xl font-bold text-blue-600", children: [healthReport.overallHealthScore.toFixed(1), "%"] }), _jsx(Progress, { value: healthReport.overallHealthScore, className: "mt-2" }), _jsxs("p", { className: "text-xs text-gray-600 mt-2", children: [healthReport.overallHealthScore >= 90
                                                ? "Excellent"
                                                : healthReport.overallHealthScore >= 80
                                                    ? "Good"
                                                    : healthReport.overallHealthScore >= 70
                                                        ? "Fair"
                                                        : "Poor", " ", "system health"] })] })] }), _jsxs(Card, { className: "bg-white", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Systems Monitored" }), _jsx(Server, { className: "h-4 w-4 text-green-600" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-green-600", children: analytics.systemsMonitored }), _jsx("p", { className: "text-xs text-gray-600 mt-2", children: "Active integrations" })] })] }), _jsxs(Card, { className: "bg-white", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Critical Issues" }), _jsx(AlertTriangle, { className: "h-4 w-4 text-red-600" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-red-600", children: analytics.criticalIssues }), _jsx("p", { className: "text-xs text-gray-600 mt-2", children: "Require immediate attention" })] })] }), _jsxs(Card, { className: "bg-white", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium", children: "Optimization Opportunities" }), _jsx(Target, { className: "h-4 w-4 text-purple-600" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-purple-600", children: analytics.optimizationOpportunities }), _jsx("p", { className: "text-xs text-gray-600 mt-2", children: "Performance improvements available" })] })] })] }), _jsxs(Tabs, { defaultValue: "systems", className: "space-y-6", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-5 bg-white", children: [_jsxs(TabsTrigger, { value: "systems", className: "flex items-center space-x-2", children: [_jsx(Server, { className: "h-4 w-4" }), _jsx("span", { children: "Systems" })] }), _jsxs(TabsTrigger, { value: "performance", className: "flex items-center space-x-2", children: [_jsx(BarChart3, { className: "h-4 w-4" }), _jsx("span", { children: "Performance" })] }), _jsxs(TabsTrigger, { value: "alerts", className: "flex items-center space-x-2", children: [_jsx(Bell, { className: "h-4 w-4" }), _jsx("span", { children: "Alerts" })] }), _jsxs(TabsTrigger, { value: "optimization", className: "flex items-center space-x-2", children: [_jsx(Zap, { className: "h-4 w-4" }), _jsx("span", { children: "Optimization" })] }), _jsxs(TabsTrigger, { value: "predictions", className: "flex items-center space-x-2", children: [_jsx(LineChart, { className: "h-4 w-4" }), _jsx("span", { children: "Predictions" })] })] }), _jsx(TabsContent, { value: "systems", className: "space-y-6", children: _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: filteredSystems.map((system) => (_jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-start", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-lg", children: system.systemName }), _jsx(CardDescription, { children: system.systemType.toUpperCase() })] }), _jsx(Badge, { className: getStatusColor(system.status), children: system.status })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { children: "Health Score" }), _jsxs("span", { className: "font-medium", children: [system.healthScore.toFixed(1), "%"] })] }), _jsx(Progress, { value: system.healthScore })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Clock, { className: "h-3 w-3 text-gray-500" }), _jsx("span", { className: "text-gray-600", children: "Response Time" })] }), _jsxs("div", { className: "font-medium", children: [system.responseTime.toFixed(0), "ms"] })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Activity, { className: "h-3 w-3 text-gray-500" }), _jsx("span", { className: "text-gray-600", children: "Uptime" })] }), _jsxs("div", { className: "font-medium", children: [system.uptime.toFixed(1), "%"] })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(AlertTriangle, { className: "h-3 w-3 text-gray-500" }), _jsx("span", { className: "text-gray-600", children: "Error Rate" })] }), _jsxs("div", { className: "font-medium", children: [system.errorRate.toFixed(2), "%"] })] }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Database, { className: "h-3 w-3 text-gray-500" }), _jsx("span", { className: "text-gray-600", children: "Throughput" })] }), _jsxs("div", { className: "font-medium", children: [system.throughput.toFixed(0), "/min"] })] })] }), _jsxs("div", { className: "text-xs text-gray-500", children: ["Last checked:", " ", new Date(system.lastHealthCheck).toLocaleString()] })] })] }, system.systemId))) }) }), _jsx(TabsContent, { value: "performance", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center space-x-2", children: [_jsx(TrendingUp, { className: "h-5 w-5 text-blue-600" }), _jsx("span", { children: "Performance Trends" })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: healthReport.performanceTrends
                                                    .slice(0, 5)
                                                    .map((trend, index) => (_jsxs("div", { className: "flex items-center justify-between p-3 bg-gray-50 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [getTrendIcon(trend.trend), _jsxs("div", { children: [_jsx("div", { className: "font-medium", children: trend.systemId.toUpperCase() }), _jsx("div", { className: "text-sm text-gray-600", children: trend.metricType.replace("_", " ") })] })] }), _jsxs("div", { className: "text-right", children: [_jsx(Badge, { className: trend.trend === "improving"
                                                                        ? "bg-green-50 text-green-700"
                                                                        : trend.trend === "degrading"
                                                                            ? "bg-red-50 text-red-700"
                                                                            : "bg-blue-50 text-blue-700", children: trend.trend }), _jsxs("div", { className: "text-xs text-gray-500 mt-1", children: ["Strength: ", (trend.trendStrength * 100).toFixed(0), "%"] })] })] }, index))) }) })] }), _jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center space-x-2", children: [_jsx(PieChart, { className: "h-5 w-5 text-purple-600" }), _jsx("span", { children: "Data Flow Intelligence" })] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "text-center p-6 bg-purple-50 rounded-lg", children: [_jsx("div", { className: "text-2xl font-bold text-purple-600", children: analytics.totalDataFlowRecords }), _jsx("div", { className: "text-sm text-purple-700", children: "Active Data Flows" })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { className: "text-center p-3 bg-gray-50 rounded", children: [_jsx("div", { className: "font-bold text-lg", children: analytics.totalPerformanceRecords }), _jsx("div", { className: "text-gray-600", children: "Performance Records" })] }), _jsxs("div", { className: "text-center p-3 bg-gray-50 rounded", children: [_jsxs("div", { className: "font-bold text-lg", children: [analytics.averageHealthScore.toFixed(1), "%"] }), _jsx("div", { className: "text-gray-600", children: "Avg Health Score" })] })] })] }) })] })] }) }), _jsx(TabsContent, { value: "alerts", className: "space-y-6", children: _jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center space-x-2", children: [_jsx(Bell, { className: "h-5 w-5 text-red-600" }), _jsx("span", { children: "Active Alerts" })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: healthReport.alertsAndNotifications.length === 0 ? (_jsxs("div", { className: "text-center py-8 text-gray-500", children: [_jsx(CheckCircle, { className: "h-12 w-12 mx-auto mb-4 text-green-500" }), _jsx("p", { children: "No active alerts. All systems are operating normally." })] })) : (healthReport.alertsAndNotifications.map((alert) => (_jsxs("div", { className: "p-4 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Badge, { className: getSeverityColor(alert.severity), children: alert.severity.toUpperCase() }), _jsx("span", { className: "font-medium", children: alert.systemId.toUpperCase() })] }), _jsx("span", { className: "text-xs text-gray-500", children: new Date(alert.timestamp).toLocaleString() })] }), _jsx("p", { className: "text-gray-700 mb-2", children: alert.message }), _jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsxs("span", { className: "text-gray-600", children: ["Type: ", alert.alertType] }), _jsxs("span", { className: "text-gray-600", children: ["Escalation Level: ", alert.escalationLevel] })] })] }, alert.alertId)))) }) })] }) }), _jsx(TabsContent, { value: "optimization", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center space-x-2", children: [_jsx(Zap, { className: "h-5 w-5 text-yellow-600" }), _jsx("span", { children: "Optimization Opportunities" })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: healthReport.optimizationOpportunities.map((opportunity) => (_jsxs("div", { className: "p-4 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-2", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium", children: opportunity.type.toUpperCase() }), _jsx("div", { className: "text-sm text-gray-600", children: opportunity.systemId.toUpperCase() })] }), _jsxs(Badge, { className: "bg-green-50 text-green-700", children: ["ROI: ", opportunity.estimatedROI.toFixed(1), "x"] })] }), _jsx("p", { className: "text-gray-700 mb-2", children: opportunity.description }), _jsxs("div", { className: "text-sm text-gray-600 mb-2", children: [_jsx("strong", { children: "Expected Benefit:" }), " ", opportunity.expectedBenefit] }), _jsxs("div", { className: "flex justify-between text-sm", children: [_jsxs("span", { children: ["Effort: ", opportunity.implementationEffort] }), _jsxs("span", { children: ["Timeline: ", opportunity.timeline] })] })] }, opportunity.opportunityId))) }) })] }), _jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center space-x-2", children: [_jsx(Target, { className: "h-5 w-5 text-blue-600" }), _jsx("span", { children: "Recommended Actions" })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: healthReport.recommendedActions.map((action) => (_jsxs("div", { className: "p-4 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-2", children: [_jsx("div", { className: "font-medium", children: action.title }), _jsx(Badge, { className: getSeverityColor(action.priority), children: action.priority.toUpperCase() })] }), _jsx("p", { className: "text-gray-700 mb-2", children: action.description }), _jsxs("div", { className: "text-sm text-gray-600 mb-2", children: [_jsx("strong", { children: "Expected Outcome:" }), " ", action.expectedOutcome] }), _jsxs("div", { className: "flex justify-between text-sm", children: [_jsxs("span", { children: ["Duration: ", action.estimatedDuration] }), _jsxs("span", { children: ["Risk: ", action.riskLevel] })] })] }, action.actionId))) }) })] })] }) }), _jsx(TabsContent, { value: "predictions", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center space-x-2", children: [_jsx(LineChart, { className: "h-5 w-5 text-purple-600" }), _jsx("span", { children: "Predicted Issues" })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: healthReport.predictedIssues.length === 0 ? (_jsxs("div", { className: "text-center py-8 text-gray-500", children: [_jsx(CheckCircle, { className: "h-12 w-12 mx-auto mb-4 text-green-500" }), _jsx("p", { children: "No issues predicted. Systems are expected to operate normally." })] })) : (healthReport.predictedIssues.map((issue) => (_jsxs("div", { className: "p-4 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-2", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium", children: issue.issueType.replace("_", " ").toUpperCase() }), _jsx("div", { className: "text-sm text-gray-600", children: issue.systemId.toUpperCase() })] }), _jsxs("div", { className: "text-right", children: [_jsx(Badge, { className: getSeverityColor(issue.severity), children: issue.severity.toUpperCase() }), _jsxs("div", { className: "text-xs text-gray-500 mt-1", children: [issue.probability.toFixed(0), "% probability"] })] })] }), _jsx("p", { className: "text-gray-700 mb-2", children: issue.description }), _jsxs("div", { className: "text-sm text-gray-600 mb-2", children: [_jsx("strong", { children: "Potential Impact:" }), " ", issue.potentialImpact] }), _jsxs("div", { className: "text-sm text-gray-600 mb-2", children: [_jsx("strong", { children: "Time to Occurrence:" }), " ", issue.timeToOccurrence, " hours"] }), issue.preventiveActions.length > 0 && (_jsxs("div", { className: "text-sm", children: [_jsx("strong", { className: "text-gray-600", children: "Preventive Actions:" }), _jsx("ul", { className: "list-disc list-inside mt-1 text-gray-600", children: issue.preventiveActions.map((action, index) => (_jsx("li", { children: action }, index))) })] }))] }, issue.issueId)))) }) })] }), _jsxs(Card, { className: "bg-white", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center space-x-2", children: [_jsx(Network, { className: "h-5 w-5 text-blue-600" }), _jsx("span", { children: "Edge Computing Intelligence" })] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "text-center p-3 bg-blue-50 rounded-lg", children: [_jsx("div", { className: "text-2xl font-bold text-blue-600", children: "12" }), _jsx("div", { className: "text-sm text-blue-700", children: "Active Devices" })] }), _jsxs("div", { className: "text-center p-3 bg-green-50 rounded-lg", children: [_jsx("div", { className: "text-2xl font-bold text-green-600", children: "98.5%" }), _jsx("div", { className: "text-sm text-green-700", children: "Uptime" })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { children: "Workload Distribution" }), _jsx("span", { className: "font-medium", children: "75% Optimal" })] }), _jsx(Progress, { value: 75, className: "h-2" })] }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { children: "Cache Hit Rate" }), _jsx("span", { className: "font-medium", children: "89.2%" })] }), _jsx(Progress, { value: 89.2, className: "h-2" })] }), _jsxs("div", { className: "p-3 bg-yellow-50 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx(AlertTriangle, { className: "h-4 w-4 text-yellow-600" }), _jsx("span", { className: "text-sm font-medium text-yellow-800", children: "Active Conflicts" })] }), _jsx("div", { className: "text-xs text-yellow-700", children: "2 resource conflicts detected and auto-resolved" })] }), _jsxs("div", { className: "grid grid-cols-2 gap-2 text-xs", children: [_jsxs("div", { className: "text-center p-2 bg-gray-50 rounded", children: [_jsx("div", { className: "font-bold", children: "156" }), _jsx("div", { className: "text-gray-600", children: "Offline Ops" })] }), _jsxs("div", { className: "text-center p-2 bg-gray-50 rounded", children: [_jsx("div", { className: "font-bold", children: "23MB" }), _jsx("div", { className: "text-gray-600", children: "Cached Data" })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("div", { className: "text-sm font-medium", children: "Device Capabilities" }), _jsxs("div", { className: "space-y-1", children: [_jsxs("div", { className: "flex justify-between text-xs", children: [_jsx("span", { children: "Processing Power" }), _jsx("span", { children: "High (8.2/10)" })] }), _jsxs("div", { className: "flex justify-between text-xs", children: [_jsx("span", { children: "Network Quality" }), _jsx("span", { children: "Excellent (95%)" })] }), _jsxs("div", { className: "flex justify-between text-xs", children: [_jsx("span", { children: "Storage Available" }), _jsx("span", { children: "2.1GB Free" })] })] })] }), _jsxs("div", { className: "p-3 bg-green-50 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-1", children: [_jsx(CheckCircle, { className: "h-4 w-4 text-green-600" }), _jsx("span", { className: "text-sm font-medium text-green-800", children: "Intelligent Sync Active" })] }), _jsx("div", { className: "text-xs text-green-700", children: "Predictive sync enabled \u2022 Next sync in 12 min" })] })] }) })] })] }) })] })] }));
};
export default IntegrationIntelligenceDashboard;
