import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { FileText, Activity, Pill, TrendingUp, Clock, CheckCircle, AlertCircle, Download, Share, } from "lucide-react";
import { format, differenceInDays } from "date-fns";
export const CarePlanViewer = ({ patientId, carePlans, className = "", }) => {
    const [selectedPlan, setSelectedPlan] = useState(carePlans.length > 0 ? carePlans[0] : null);
    const [activeTab, setActiveTab] = useState("overview");
    const getStatusColor = (status) => {
        switch (status) {
            case "active":
                return "bg-green-100 text-green-800";
            case "completed":
                return "bg-blue-100 text-blue-800";
            case "paused":
                return "bg-yellow-100 text-yellow-800";
            case "cancelled":
                return "bg-red-100 text-red-800";
            default:
                return "bg-gray-100 text-gray-800";
        }
    };
    const getGoalStatusIcon = (status) => {
        switch (status) {
            case "achieved":
                return _jsx(CheckCircle, { className: "h-4 w-4 text-green-600" });
            case "in-progress":
                return _jsx(Clock, { className: "h-4 w-4 text-blue-600" });
            case "not-started":
                return _jsx(AlertCircle, { className: "h-4 w-4 text-gray-400" });
            case "modified":
                return _jsx(TrendingUp, { className: "h-4 w-4 text-orange-600" });
            default:
                return _jsx(AlertCircle, { className: "h-4 w-4 text-gray-400" });
        }
    };
    const calculateOverallProgress = (goals) => {
        if (goals.length === 0)
            return 0;
        return goals.reduce((acc, goal) => acc + goal.progress, 0) / goals.length;
    };
    const getDaysRemaining = (endDate) => {
        if (!endDate)
            return null;
        const days = differenceInDays(new Date(endDate), new Date());
        return days > 0 ? days : 0;
    };
    if (carePlans.length === 0) {
        return (_jsxs("div", { className: `text-center py-12 ${className}`, children: [_jsx(FileText, { className: "h-16 w-16 text-gray-400 mx-auto mb-4" }), _jsx("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: "No Care Plans Available" }), _jsx("p", { className: "text-gray-500 mb-6", children: "You don't have any active care plans at the moment. Your healthcare provider will create care plans as needed." }), _jsx(Button, { variant: "outline", children: "Contact Your Provider" })] }));
    }
    return (_jsxs("div", { className: `space-y-6 ${className}`, children: [_jsxs("div", { className: "flex flex-col sm:flex-row sm:items-center sm:justify-between", children: [_jsxs("div", { children: [_jsx("h2", { className: "text-2xl font-bold text-gray-900", children: "Care Plans" }), _jsx("p", { className: "text-gray-600 mt-1", children: "Track your progress and view your personalized care plans" })] }), _jsxs("div", { className: "flex space-x-2 mt-4 sm:mt-0", children: [_jsxs(Button, { variant: "outline", size: "sm", children: [_jsx(Download, { className: "h-4 w-4 mr-2" }), "Export"] }), _jsxs(Button, { variant: "outline", size: "sm", children: [_jsx(Share, { className: "h-4 w-4 mr-2" }), "Share"] })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-4 gap-6", children: [_jsx("div", { className: "lg:col-span-1", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-lg", children: "Your Care Plans" }) }), _jsx(CardContent, { className: "p-0", children: _jsx("div", { className: "space-y-2", children: carePlans.map((plan) => {
                                            const overallProgress = calculateOverallProgress(plan.goals);
                                            const daysRemaining = getDaysRemaining(plan.endDate);
                                            return (_jsxs("button", { onClick: () => setSelectedPlan(plan), className: `w-full text-left p-4 rounded-lg border transition-colors ${selectedPlan?.id === plan.id
                                                    ? "bg-blue-50 border-blue-200"
                                                    : "hover:bg-gray-50 border-gray-200"}`, children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("h4", { className: "font-medium text-gray-900 text-sm", children: plan.title }), _jsx(Badge, { className: getStatusColor(plan.status), children: plan.status })] }), _jsx("p", { className: "text-xs text-gray-600 mb-3 line-clamp-2", children: plan.description }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between text-xs text-gray-500", children: [_jsx("span", { children: "Progress" }), _jsxs("span", { children: [Math.round(overallProgress), "%"] })] }), _jsx(Progress, { value: overallProgress, className: "h-1" }), daysRemaining !== null && (_jsxs("p", { className: "text-xs text-gray-500", children: [daysRemaining, " days remaining"] }))] })] }, plan.id));
                                        }) }) })] }) }), _jsx("div", { className: "lg:col-span-3", children: selectedPlan ? (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsxs(CardTitle, { className: "flex items-center", children: [_jsx(FileText, { className: "h-5 w-5 mr-2" }), selectedPlan.title] }), _jsx("p", { className: "text-gray-600 mt-1", children: selectedPlan.description })] }), _jsx(Badge, { className: getStatusColor(selectedPlan.status), children: selectedPlan.status })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 mt-4", children: [_jsxs("div", { className: "text-center p-3 bg-gray-50 rounded-lg", children: [_jsxs("p", { className: "text-2xl font-bold text-gray-900", children: [Math.round(calculateOverallProgress(selectedPlan.goals)), "%"] }), _jsx("p", { className: "text-sm text-gray-600", children: "Overall Progress" })] }), _jsxs("div", { className: "text-center p-3 bg-gray-50 rounded-lg", children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: selectedPlan.goals.length }), _jsx("p", { className: "text-sm text-gray-600", children: "Goals" })] }), _jsxs("div", { className: "text-center p-3 bg-gray-50 rounded-lg", children: [_jsx("p", { className: "text-2xl font-bold text-gray-900", children: selectedPlan.interventions.length }), _jsx("p", { className: "text-sm text-gray-600", children: "Interventions" })] })] })] }), _jsx(CardContent, { children: _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4", children: [_jsx(TabsTrigger, { value: "overview", children: "Overview" }), _jsx(TabsTrigger, { value: "goals", children: "Goals" }), _jsx(TabsTrigger, { value: "interventions", children: "Interventions" }), _jsx(TabsTrigger, { value: "medications", children: "Medications" })] }), _jsx(TabsContent, { value: "overview", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-medium text-gray-900 mb-3", children: "Plan Details" }), _jsxs("div", { className: "space-y-2 text-sm", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Start Date:" }), _jsx("span", { className: "font-medium", children: format(new Date(selectedPlan.startDate), "MMM dd, yyyy") })] }), selectedPlan.endDate && (_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "End Date:" }), _jsx("span", { className: "font-medium", children: format(new Date(selectedPlan.endDate), "MMM dd, yyyy") })] })), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Created By:" }), _jsx("span", { className: "font-medium", children: selectedPlan.createdBy })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-gray-600", children: "Last Updated:" }), _jsx("span", { className: "font-medium", children: format(new Date(selectedPlan.updatedAt), "MMM dd, yyyy") })] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium text-gray-900 mb-3", children: "Recent Progress" }), _jsx("div", { className: "space-y-3", children: selectedPlan.progress.slice(0, 3).map((note) => (_jsxs("div", { className: "p-3 bg-gray-50 rounded-lg", children: [_jsxs("div", { className: "flex items-center justify-between mb-1", children: [_jsx("h5", { className: "text-sm font-medium text-gray-900", children: note.title }), _jsx("span", { className: "text-xs text-gray-500", children: format(new Date(note.date), "MMM dd") })] }), _jsx("p", { className: "text-sm text-gray-600 line-clamp-2", children: note.content }), _jsxs("p", { className: "text-xs text-gray-500 mt-1", children: ["By ", note.author] })] }, note.id))) })] })] }) }), _jsx(TabsContent, { value: "goals", className: "space-y-4", children: selectedPlan.goals.map((goal) => (_jsx(Card, { children: _jsxs(CardContent, { className: "p-4", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [getGoalStatusIcon(goal.status), _jsx("h4", { className: "font-medium text-gray-900", children: goal.title })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs("span", { className: "text-sm font-medium", children: [goal.progress, "%"] }), _jsx(Badge, { className: getStatusColor(goal.status), children: goal.status.replace("-", " ") })] })] }), _jsx("p", { className: "text-sm text-gray-600 mb-3", children: goal.description }), _jsxs("div", { className: "space-y-2 mb-4", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-gray-600", children: "Progress" }), _jsxs("span", { className: "font-medium", children: [goal.progress, "%"] })] }), _jsx(Progress, { value: goal.progress, className: "h-2" })] }), goal.metrics.length > 0 && (_jsxs("div", { children: [_jsx("h5", { className: "text-sm font-medium text-gray-900 mb-2", children: "Metrics" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-3", children: goal.metrics.map((metric, index) => (_jsx("div", { className: "p-2 bg-gray-50 rounded", children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm text-gray-600", children: metric.name }), _jsxs("span", { className: "text-sm font-medium", children: [metric.current, " / ", metric.target, " ", metric.unit] })] }) }, index))) })] })), _jsx("div", { className: "flex justify-between items-center mt-3 text-sm text-gray-500", children: _jsxs("span", { children: ["Target Date:", " ", format(new Date(goal.targetDate), "MMM dd, yyyy")] }) })] }) }, goal.id))) }), _jsx(TabsContent, { value: "interventions", className: "space-y-4", children: selectedPlan.interventions.map((intervention) => (_jsx(Card, { children: _jsxs(CardContent, { className: "p-4", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Activity, { className: "h-4 w-4 text-blue-600" }), _jsx("h4", { className: "font-medium text-gray-900", children: intervention.title })] }), _jsx(Badge, { className: getStatusColor(intervention.status), children: intervention.status })] }), _jsx("p", { className: "text-sm text-gray-600 mb-3", children: intervention.description }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "text-gray-600", children: "Type:" }), _jsx("p", { className: "font-medium capitalize", children: intervention.type })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600", children: "Frequency:" }), _jsx("p", { className: "font-medium", children: intervention.frequency })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600", children: "Duration:" }), _jsx("p", { className: "font-medium", children: intervention.duration })] })] }), intervention.instructions && (_jsxs("div", { className: "mt-3 p-3 bg-blue-50 rounded-lg", children: [_jsx("h5", { className: "text-sm font-medium text-blue-900 mb-1", children: "Instructions" }), _jsx("p", { className: "text-sm text-blue-800", children: intervention.instructions })] }))] }) }, intervention.id))) }), _jsx(TabsContent, { value: "medications", className: "space-y-4", children: selectedPlan.medications.map((medication) => (_jsx(Card, { children: _jsxs(CardContent, { className: "p-4", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Pill, { className: "h-4 w-4 text-green-600" }), _jsx("h4", { className: "font-medium text-gray-900", children: medication.name })] }), _jsx(Badge, { className: getStatusColor(medication.status), children: medication.status })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm mb-3", children: [_jsxs("div", { children: [_jsx("span", { className: "text-gray-600", children: "Dosage:" }), _jsx("p", { className: "font-medium", children: medication.dosage })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600", children: "Frequency:" }), _jsx("p", { className: "font-medium", children: medication.frequency })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600", children: "Route:" }), _jsx("p", { className: "font-medium", children: medication.route })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600", children: "Duration:" }), _jsxs("p", { className: "font-medium", children: [format(new Date(medication.startDate), "MMM dd"), " ", "-", medication.endDate
                                                                                        ? format(new Date(medication.endDate), "MMM dd")
                                                                                        : "Ongoing"] })] })] }), medication.instructions && (_jsxs("div", { className: "mb-3 p-3 bg-green-50 rounded-lg", children: [_jsx("h5", { className: "text-sm font-medium text-green-900 mb-1", children: "Instructions" }), _jsx("p", { className: "text-sm text-green-800", children: medication.instructions })] })), (medication.sideEffects.length > 0 ||
                                                                medication.interactions.length > 0) && (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [medication.sideEffects.length > 0 && (_jsxs("div", { children: [_jsx("h5", { className: "text-sm font-medium text-gray-900 mb-1", children: "Side Effects" }), _jsx("ul", { className: "text-sm text-gray-600 space-y-1", children: medication.sideEffects.map((effect, index) => (_jsxs("li", { className: "flex items-center", children: [_jsx("span", { className: "w-1 h-1 bg-gray-400 rounded-full mr-2" }), effect] }, index))) })] })), medication.interactions.length > 0 && (_jsxs("div", { children: [_jsx("h5", { className: "text-sm font-medium text-gray-900 mb-1", children: "Interactions" }), _jsx("ul", { className: "text-sm text-gray-600 space-y-1", children: medication.interactions.map((interaction, index) => (_jsxs("li", { className: "flex items-center", children: [_jsx("span", { className: "w-1 h-1 bg-red-400 rounded-full mr-2" }), interaction] }, index))) })] }))] }))] }) }, medication.id))) })] }) })] })) : (_jsx(Card, { children: _jsxs(CardContent, { className: "p-12 text-center", children: [_jsx(FileText, { className: "h-16 w-16 text-gray-400 mx-auto mb-4" }), _jsx("h3", { className: "text-lg font-medium text-gray-900 mb-2", children: "Select a Care Plan" }), _jsx("p", { className: "text-gray-500", children: "Choose a care plan from the list to view its details, goals, and progress." })] }) })) })] })] }));
};
export default CarePlanViewer;
