import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter, } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem, } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Progress } from "@/components/ui/progress";
import { Users, UserCheck, Shield, Stethoscope, Rocket, Save, Upload, } from "lucide-react";
const StartOfService = ({ patientId = "P12345", episodeId = "EP789", isOffline = false, }) => {
    const [activeProcess, setActiveProcess] = useState("manpower-preparation");
    const [serviceStatus, setServiceStatus] = useState("Preparing");
    const [completionProgress, setCompletionProgress] = useState(15);
    // Mock data for staff
    const nurses = [
        {
            id: "N001",
            name: "Fatima Al Zaabi",
            specialization: "Critical Care",
            experience: "8 years",
            zone: "Abu Dhabi Central",
        },
        {
            id: "N002",
            name: "Ahmed Al Mansoori",
            specialization: "Wound Care",
            experience: "5 years",
            zone: "Abu Dhabi West",
        },
        {
            id: "N003",
            name: "Sarah Johnson",
            specialization: "Geriatric Care",
            experience: "10 years",
            zone: "Abu Dhabi East",
        },
        {
            id: "N004",
            name: "Mohammed Al Hashimi",
            specialization: "Respiratory",
            experience: "7 years",
            zone: "Al Ain",
        },
        {
            id: "N005",
            name: "Aisha Al Dhaheri",
            specialization: "Pediatric",
            experience: "6 years",
            zone: "Abu Dhabi Central",
        },
    ];
    const supervisors = [
        {
            id: "S001",
            name: "Dr. Khalid Al Mazrouei",
            role: "Nurse Supervisor",
            zone: "Abu Dhabi Central",
        },
        {
            id: "S002",
            name: "Dr. Layla Al Shamsi",
            role: "Charge Nurse",
            zone: "Abu Dhabi West",
        },
        {
            id: "S003",
            name: "Dr. Noura Al Kaabi",
            role: "Infection Control Officer",
            zone: "Abu Dhabi East",
        },
        {
            id: "S004",
            name: "Dr. Hamad Al Suwaidi",
            role: "Head Nurse",
            zone: "Al Ain",
        },
    ];
    // Mock data for zones
    const zones = [
        "Abu Dhabi Central",
        "Abu Dhabi West",
        "Abu Dhabi East",
        "Al Ain",
        "Western Region",
    ];
    // Mock data for skills and equipment
    const requiredSkills = [
        "Wound Care",
        "IV Management",
        "Respiratory Care",
        "Medication Administration",
        "Vital Signs Monitoring",
        "Mobility Assistance",
        "Catheter Care",
        "Diabetes Management",
    ];
    const equipmentList = [
        "Hospital Bed",
        "Oxygen Concentrator",
        "Wheelchair",
        "Walker",
        "Suction Machine",
        "Blood Pressure Monitor",
        "Glucometer",
        "Pulse Oximeter",
        "Nebulizer",
        "Wound Care Kit",
    ];
    const handleSave = () => {
        if (isOffline) {
            alert("Data saved locally. Will sync when online connection is restored.");
        }
        else {
            alert("Service initiation data saved successfully.");
        }
        // Increment progress for demo purposes
        setCompletionProgress(Math.min(100, completionProgress + 15));
    };
    const handleStatusChange = (status) => {
        setServiceStatus(status);
        if (status === "Ready to Start") {
            setCompletionProgress(Math.min(100, completionProgress + 20));
        }
        else if (status === "Active") {
            setCompletionProgress(100);
        }
    };
    return (_jsxs("div", { className: "w-full h-full bg-background p-4 md:p-6", children: [_jsxs("div", { className: "flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4", children: [_jsxs("div", { children: [_jsx("h2", { className: "text-2xl font-bold", children: "Start of Service" }), _jsxs("div", { className: "flex items-center gap-2 mt-1", children: [_jsxs(Badge, { variant: "outline", children: ["Episode: ", episodeId] }), _jsxs(Badge, { variant: "outline", children: ["Patient ID: ", patientId] }), _jsx(Badge, { className: `${serviceStatus === "Active"
                                            ? "bg-green-100 text-green-800"
                                            : serviceStatus === "Ready to Start"
                                                ? "bg-blue-100 text-blue-800"
                                                : serviceStatus === "On Hold"
                                                    ? "bg-amber-100 text-amber-800"
                                                    : "bg-gray-100 text-gray-800"}`, children: serviceStatus })] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsxs(Select, { value: serviceStatus, onValueChange: handleStatusChange, children: [_jsx(SelectTrigger, { className: "w-[180px]", children: _jsx(SelectValue, { placeholder: "Service Status" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "Preparing", children: "Preparing" }), _jsx(SelectItem, { value: "Ready to Start", children: "Ready to Start" }), _jsx(SelectItem, { value: "Active", children: "Active" }), _jsx(SelectItem, { value: "On Hold", children: "On Hold" })] })] }), _jsx(Badge, { variant: isOffline ? "destructive" : "secondary", className: "text-xs", children: isOffline ? "Offline Mode" : "Online" })] })] }), _jsx(Card, { className: "mb-6", children: _jsx(CardContent, { className: "pt-6", children: _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium", children: "Service Initiation Progress" }), _jsxs("span", { className: "text-sm font-medium", children: [completionProgress, "%"] })] }), _jsx(Progress, { value: completionProgress, className: "h-2" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-5 gap-2 text-xs text-muted-foreground mt-2", children: [_jsxs("div", { className: `flex items-center gap-1 ${completionProgress >= 20 ? "text-green-600" : ""}`, children: [_jsx("div", { className: `w-2 h-2 rounded-full ${completionProgress >= 20 ? "bg-green-600" : "bg-gray-300"}` }), _jsx("span", { children: "Manpower" })] }), _jsxs("div", { className: `flex items-center gap-1 ${completionProgress >= 40 ? "text-green-600" : ""}`, children: [_jsx("div", { className: `w-2 h-2 rounded-full ${completionProgress >= 40 ? "bg-green-600" : "bg-gray-300"}` }), _jsx("span", { children: "Planning" })] }), _jsxs("div", { className: `flex items-center gap-1 ${completionProgress >= 60 ? "text-green-600" : ""}`, children: [_jsx("div", { className: `w-2 h-2 rounded-full ${completionProgress >= 60 ? "bg-green-600" : "bg-gray-300"}` }), _jsx("span", { children: "Infection Control" })] }), _jsxs("div", { className: `flex items-center gap-1 ${completionProgress >= 80 ? "text-green-600" : ""}`, children: [_jsx("div", { className: `w-2 h-2 rounded-full ${completionProgress >= 80 ? "bg-green-600" : "bg-gray-300"}` }), _jsx("span", { children: "Coordination" })] }), _jsxs("div", { className: `flex items-center gap-1 ${completionProgress >= 100 ? "text-green-600" : ""}`, children: [_jsx("div", { className: `w-2 h-2 rounded-full ${completionProgress >= 100 ? "bg-green-600" : "bg-gray-300"}` }), _jsx("span", { children: "Launch" })] })] })] }) }) }), _jsxs(Tabs, { value: activeProcess, onValueChange: setActiveProcess, className: "mb-6", children: [_jsxs(TabsList, { className: "grid grid-cols-2 md:grid-cols-5 mb-6", children: [_jsxs(TabsTrigger, { value: "manpower-preparation", children: [_jsx(Users, { className: "h-4 w-4 mr-2 hidden md:inline" }), _jsx("span", { className: "truncate", children: "Manpower Preparation" })] }), _jsxs(TabsTrigger, { value: "advanced-planning", children: [_jsx(UserCheck, { className: "h-4 w-4 mr-2 hidden md:inline" }), _jsx("span", { className: "truncate", children: "Advanced Planning" })] }), _jsxs(TabsTrigger, { value: "infection-control", children: [_jsx(Shield, { className: "h-4 w-4 mr-2 hidden md:inline" }), _jsx("span", { className: "truncate", children: "Infection Control" })] }), _jsxs(TabsTrigger, { value: "service-coordination", children: [_jsx(Stethoscope, { className: "h-4 w-4 mr-2 hidden md:inline" }), _jsx("span", { className: "truncate", children: "Service Coordination" })] }), _jsxs(TabsTrigger, { value: "service-launch", children: [_jsx(Rocket, { className: "h-4 w-4 mr-2 hidden md:inline" }), _jsx("span", { className: "truncate", children: "Service Launch" })] })] }), _jsx(TabsContent, { value: "manpower-preparation", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Users, { className: "h-5 w-5" }), "Manpower Preparation"] }), _jsx(CardDescription, { children: "Prepare the manpower (Nurses & Assistant Nurses) in the team as per the required number of manpower needed for the patient and as per the Plan of Care." })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "nurse-supervisor", children: "Nurse Supervisor" }), _jsxs(Select, { defaultValue: "S001", children: [_jsx(SelectTrigger, { id: "nurse-supervisor", children: _jsx(SelectValue, { placeholder: "Select supervisor" }) }), _jsx(SelectContent, { children: supervisors
                                                                            .filter((s) => s.role === "Nurse Supervisor")
                                                                            .map((supervisor) => (_jsx(SelectItem, { value: supervisor.id, children: supervisor.name }, supervisor.id))) })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "primary-nurse", children: "Primary Nurse Assignment" }), _jsxs(Select, { defaultValue: "N001", children: [_jsx(SelectTrigger, { id: "primary-nurse", children: _jsx(SelectValue, { placeholder: "Select primary nurse" }) }), _jsx(SelectContent, { children: nurses.map((nurse) => (_jsxs(SelectItem, { value: nurse.id, children: [nurse.name, " - ", nurse.specialization] }, nurse.id))) })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "backup-nurse", children: "Backup Nurse Assignment" }), _jsxs(Select, { defaultValue: "N003", children: [_jsx(SelectTrigger, { id: "backup-nurse", children: _jsx(SelectValue, { placeholder: "Select backup nurse" }) }), _jsx(SelectContent, { children: nurses.map((nurse) => (_jsxs(SelectItem, { value: nurse.id, children: [nurse.name, " - ", nurse.specialization] }, nurse.id))) })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "required-skills", children: "Required Skills" }), _jsx("div", { className: "grid grid-cols-2 gap-2 mt-2", children: requiredSkills.map((skill, index) => (_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: `skill-${index}`, defaultChecked: index < 3 }), _jsx(Label, { htmlFor: `skill-${index}`, className: "text-sm", children: skill })] }, index))) })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "experience-level", children: "Experience Level Match" }), _jsxs(Select, { defaultValue: "advanced", children: [_jsx(SelectTrigger, { id: "experience-level", children: _jsx(SelectValue, { placeholder: "Select experience level" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "basic", children: "Basic (1-2 years)" }), _jsx(SelectItem, { value: "intermediate", children: "Intermediate (3-5 years)" }), _jsx(SelectItem, { value: "advanced", children: "Advanced (6+ years)" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "special-training", children: "Special Training Required" }), _jsx(Textarea, { id: "special-training", placeholder: "Enter any special training requirements", defaultValue: "Advanced wound care certification, Ventilator management experience" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Certification Verification" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "cert-verified", defaultChecked: true }), _jsx(Label, { htmlFor: "cert-verified", className: "text-sm", children: "Nurse certifications verified" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "license-verified", defaultChecked: true }), _jsx(Label, { htmlFor: "license-verified", className: "text-sm", children: "Nursing licenses current" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "doh-verified", defaultChecked: true }), _jsx(Label, { htmlFor: "doh-verified", className: "text-sm", children: "DOH registration verified" })] })] })] })] })] }) }), _jsxs(CardFooter, { className: "flex justify-between border-t pt-4", children: [_jsx(Button, { variant: "outline", children: "Reset" }), _jsx(Button, { onClick: handleSave, children: "Save & Continue" })] })] }) }), _jsx(TabsContent, { value: "advanced-planning", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(UserCheck, { className: "h-5 w-5" }), "Advanced Manpower Planning"] }), _jsx(CardDescription, { children: "Execute detailed manpower allocation considering patient-to-nurse ratios, geographic clustering, travel time optimization, and backup coverage." })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "charge-nurse", children: "Charge Nurse" }), _jsxs(Select, { defaultValue: "S002", children: [_jsx(SelectTrigger, { id: "charge-nurse", children: _jsx(SelectValue, { placeholder: "Select charge nurse" }) }), _jsx(SelectContent, { children: supervisors
                                                                            .filter((s) => s.role === "Charge Nurse")
                                                                            .map((supervisor) => (_jsx(SelectItem, { value: supervisor.id, children: supervisor.name }, supervisor.id))) })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "patient-zone", children: "Patient Zone" }), _jsxs(Select, { defaultValue: "Abu Dhabi Central", children: [_jsx(SelectTrigger, { id: "patient-zone", children: _jsx(SelectValue, { placeholder: "Select patient zone" }) }), _jsx(SelectContent, { children: zones.map((zone, index) => (_jsx(SelectItem, { value: zone, children: zone }, index))) })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "staff-zone", children: "Assigned Staff Zone" }), _jsxs(Select, { defaultValue: "Abu Dhabi Central", children: [_jsx(SelectTrigger, { id: "staff-zone", children: _jsx(SelectValue, { placeholder: "Select staff zone" }) }), _jsx(SelectContent, { children: zones.map((zone, index) => (_jsx(SelectItem, { value: zone, children: zone }, index))) })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "travel-time", children: "Estimated Travel Time (minutes)" }), _jsx(Input, { id: "travel-time", type: "number", defaultValue: "15" })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Geographic Optimization" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "route-optimized", defaultChecked: true }), _jsx(Label, { htmlFor: "route-optimized", className: "text-sm", children: "Route optimization completed" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "cluster-optimized", defaultChecked: true }), _jsx(Label, { htmlFor: "cluster-optimized", className: "text-sm", children: "Patient clustering optimized" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Patient-to-Nurse Ratio" }), _jsxs("div", { className: "grid grid-cols-2 gap-4 mt-2", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "patient-count", className: "text-sm", children: "Patients" }), _jsx(Input, { id: "patient-count", type: "number", defaultValue: "8" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "nurse-count", className: "text-sm", children: "Nurses" }), _jsx(Input, { id: "nurse-count", type: "number", defaultValue: "2" })] })] }), _jsx("p", { className: "text-xs text-muted-foreground mt-1", children: "Current ratio: 4:1 (Recommended: 4:1 or lower)" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "backup-plan", children: "Backup Coverage Plan" }), _jsx(Textarea, { id: "backup-plan", placeholder: "Describe backup coverage plan", defaultValue: "Nurse Sarah Johnson on standby for emergency coverage. Charge nurse available for escalation." })] })] })] }) }), _jsxs(CardFooter, { className: "flex justify-between border-t pt-4", children: [_jsx(Button, { variant: "outline", children: "Reset" }), _jsx(Button, { onClick: handleSave, children: "Save & Continue" })] })] }) }), _jsx(TabsContent, { value: "infection-control", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "h-5 w-5" }), "Infection Control Staffing"] }), _jsx(CardDescription, { children: "Ensure infection control compliance in staff assignments including verification of vaccination status, health screening, PPE availability, and specialized training." })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "infection-officer", children: "Infection Control Officer" }), _jsxs(Select, { defaultValue: "S003", children: [_jsx(SelectTrigger, { id: "infection-officer", children: _jsx(SelectValue, { placeholder: "Select infection control officer" }) }), _jsx(SelectContent, { children: supervisors
                                                                            .filter((s) => s.role === "Infection Control Officer")
                                                                            .map((supervisor) => (_jsx(SelectItem, { value: supervisor.id, children: supervisor.name }, supervisor.id))) })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Health & Vaccination Status" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "health-cleared", defaultChecked: true }), _jsx(Label, { htmlFor: "health-cleared", className: "text-sm", children: "Staff health cleared" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "vaccination-verified", defaultChecked: true }), _jsx(Label, { htmlFor: "vaccination-verified", className: "text-sm", children: "Vaccination status verified" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "covid-screened", defaultChecked: true }), _jsx(Label, { htmlFor: "covid-screened", className: "text-sm", children: "COVID-19 screening completed" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "ppe-requirements", children: "PPE Requirements" }), _jsx(Textarea, { id: "ppe-requirements", placeholder: "List required PPE", defaultValue: "N95 masks, face shields, disposable gowns, gloves, hand sanitizer" })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "PPE Allocation" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "ppe-allocated", defaultChecked: true }), _jsx(Label, { htmlFor: "ppe-allocated", className: "text-sm", children: "PPE allocated to staff" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "ppe-training", defaultChecked: true }), _jsx(Label, { htmlFor: "ppe-training", className: "text-sm", children: "PPE usage training completed" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "infection-training", children: "Specialized Infection Control Training" }), _jsx(Textarea, { id: "infection-training", placeholder: "Describe specialized training requirements", defaultValue: "Staff completed advanced infection control protocols for immunocompromised patients. Isolation procedures training completed." })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "infection-notes", children: "Additional Infection Control Notes" }), _jsx(Textarea, { id: "infection-notes", placeholder: "Enter additional notes", defaultValue: "Patient requires contact precautions. Family members trained on hand hygiene and PPE usage." })] })] })] }) }), _jsxs(CardFooter, { className: "flex justify-between border-t pt-4", children: [_jsx(Button, { variant: "outline", children: "Reset" }), _jsx(Button, { onClick: handleSave, children: "Save & Continue" })] })] }) }), _jsx(TabsContent, { value: "service-coordination", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Stethoscope, { className: "h-5 w-5" }), "Clinical Service Coordination"] }), _jsx(CardDescription, { children: "Coordinate clinical service initiation including initial visit scheduling, patient/family orientation, equipment delivery, and emergency contact establishment." })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "head-nurse", children: "Head Nurse" }), _jsxs(Select, { defaultValue: "S004", children: [_jsx(SelectTrigger, { id: "head-nurse", children: _jsx(SelectValue, { placeholder: "Select head nurse" }) }), _jsx(SelectContent, { children: supervisors
                                                                            .filter((s) => s.role === "Head Nurse")
                                                                            .map((supervisor) => (_jsx(SelectItem, { value: supervisor.id, children: supervisor.name }, supervisor.id))) })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "service-start-date", children: "Service Start Date" }), _jsx(Input, { id: "service-start-date", type: "date", defaultValue: new Date().toISOString().split("T")[0] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "first-visit-date", children: "First Visit Date" }), _jsx(Input, { id: "first-visit-date", type: "date", defaultValue: new Date().toISOString().split("T")[0] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "first-visit-time", children: "First Visit Time" }), _jsx(Input, { id: "first-visit-time", type: "time", defaultValue: "10:00" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Initial Visit Status" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "visit-scheduled", defaultChecked: true }), _jsx(Label, { htmlFor: "visit-scheduled", className: "text-sm", children: "First visit scheduled" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "patient-notified", defaultChecked: true }), _jsx(Label, { htmlFor: "patient-notified", className: "text-sm", children: "Patient/family notified" })] })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Equipment & Supplies" }), _jsx(ScrollArea, { className: "h-[150px] border rounded-md p-2", children: _jsx("div", { className: "space-y-2", children: equipmentList.map((item, index) => (_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: `equipment-${index}`, defaultChecked: index < 5 }), _jsx(Label, { htmlFor: `equipment-${index}`, className: "text-sm", children: item })] }, index))) }) })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "equipment-delivery-date", children: "Equipment Delivery Date" }), _jsx(Input, { id: "equipment-delivery-date", type: "date", defaultValue: new Date().toISOString().split("T")[0] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Documentation Setup" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "initial-docs", defaultChecked: true }), _jsx(Label, { htmlFor: "initial-docs", className: "text-sm", children: "Initial documentation prepared" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "emr-setup", defaultChecked: true }), _jsx(Label, { htmlFor: "emr-setup", className: "text-sm", children: "EMR setup completed" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "patient-file", defaultChecked: true }), _jsx(Label, { htmlFor: "patient-file", className: "text-sm", children: "Patient file created" })] })] })] })] })] }) }), _jsxs(CardFooter, { className: "flex justify-between border-t pt-4", children: [_jsx(Button, { variant: "outline", children: "Reset" }), _jsx(Button, { onClick: handleSave, children: "Save & Continue" })] })] }) }), _jsx(TabsContent, { value: "service-launch", className: "space-y-6", children: _jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Rocket, { className: "h-5 w-5" }), "Comprehensive Service Launch"] }), _jsx(CardDescription, { children: "Execute comprehensive service launch including family education, care plan review, emergency procedures training, and quality assurance protocols establishment." })] }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "family-orientation-date", children: "Family Orientation Date" }), _jsx(Input, { id: "family-orientation-date", type: "date", defaultValue: new Date().toISOString().split("T")[0] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Patient/Family Preparation" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "orientation-scheduled", defaultChecked: true }), _jsx(Label, { htmlFor: "orientation-scheduled", className: "text-sm", children: "Family orientation scheduled" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "orientation-completed" }), _jsx(Label, { htmlFor: "orientation-completed", className: "text-sm", children: "Family orientation completed" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "care-plan-reviewed" }), _jsx(Label, { htmlFor: "care-plan-reviewed", className: "text-sm", children: "Care plan reviewed with family" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "emergency-trained" }), _jsx(Label, { htmlFor: "emergency-trained", className: "text-sm", children: "Emergency procedures trained" })] })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Communication Setup" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "whatsapp-created", defaultChecked: true }), _jsx(Label, { htmlFor: "whatsapp-created", className: "text-sm", children: "WhatsApp group created" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "emergency-contacts", defaultChecked: true }), _jsx(Label, { htmlFor: "emergency-contacts", className: "text-sm", children: "Emergency contacts established" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "communication-preferences", children: "Family Communication Preferences" }), _jsx(Textarea, { id: "communication-preferences", placeholder: "Enter communication preferences", defaultValue: "Primary contact: Son (Mohammed) - Prefers WhatsApp. Secondary contact: Daughter (Fatima) - Prefers phone calls. Best time to contact: Evenings after 6pm." })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { children: "Quality Protocols" }), _jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "quality-monitoring", defaultChecked: true }), _jsx(Label, { htmlFor: "quality-monitoring", className: "text-sm", children: "Quality monitoring established" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "feedback-mechanisms", defaultChecked: true }), _jsx(Label, { htmlFor: "feedback-mechanisms", className: "text-sm", children: "Feedback mechanisms setup" })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Checkbox, { id: "escalation-procedures", defaultChecked: true }), _jsx(Label, { htmlFor: "escalation-procedures", className: "text-sm", children: "Escalation procedures communicated" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "quality-notes", children: "Quality Assurance Notes" }), _jsx(Textarea, { id: "quality-notes", placeholder: "Enter quality assurance notes", defaultValue: "Weekly quality checks scheduled. Patient satisfaction survey to be conducted after first week. 24/7 emergency line established." })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "launch-notes", children: "Service Launch Notes" }), _jsx(Textarea, { id: "launch-notes", placeholder: "Enter service launch notes", defaultValue: "All preparations completed. Service ready to launch. Initial focus on wound care and medication management. Follow-up assessment scheduled for one week after service start." })] })] })] }) }), _jsxs(CardFooter, { className: "flex justify-between border-t pt-4", children: [_jsx(Button, { variant: "outline", children: "Reset" }), _jsxs("div", { className: "flex gap-2", children: [_jsxs(Button, { variant: "outline", onClick: handleSave, children: [_jsx(Save, { className: "h-4 w-4 mr-2" }), " Save Draft"] }), _jsxs(Button, { onClick: () => handleStatusChange("Ready to Start"), children: [_jsx(Upload, { className: "h-4 w-4 mr-2" }), " Complete & Launch"] })] })] })] }) })] })] }));
};
export default StartOfService;
