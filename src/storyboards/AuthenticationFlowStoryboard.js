import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Shield, User, CheckCircle, AlertCircle, Key, Users, Settings, } from "lucide-react";
import { useSupabaseAuth } from "@/hooks/useSupabaseAuth";
import LoginForm from "@/components/auth/LoginForm";
import ProtectedRoute from "@/components/auth/ProtectedRoute";
const AuthenticationFlowStoryboard = () => {
    const { user, userProfile, loading, signOut, isRole, hasPermission } = useSupabaseAuth();
    const [activeDemo, setActiveDemo] = useState("login");
    const DemoSection = ({ title, children, }) => (_jsxs(Card, { className: "mb-6", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "h-5 w-5" }), title] }) }), _jsx(CardContent, { children: children })] }));
    const UserInfoCard = () => (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(User, { className: "h-5 w-5" }), "Current User"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600", children: "Email" }), _jsx("p", { className: "font-medium", children: user?.email })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600", children: "User ID" }), _jsx("p", { className: "font-mono text-sm", children: user?.id })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600", children: "Role" }), _jsx(Badge, { variant: "outline", children: userProfile?.role || "Loading..." })] }), _jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600", children: "Full Name" }), _jsx("p", { className: "font-medium", children: userProfile?.full_name || "Loading..." })] })] }), userProfile?.license_number && (_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600", children: "License Number" }), _jsx("p", { className: "font-medium", children: userProfile.license_number })] })), userProfile?.department && (_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-600", children: "Department" }), _jsx("p", { className: "font-medium", children: userProfile.department })] })), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("p", { className: "text-sm text-gray-600", children: "Account Status:" }), _jsx(Badge, { variant: userProfile?.is_active ? "default" : "destructive", children: userProfile?.is_active ? "Active" : "Inactive" })] })] }) })] }));
    const RolePermissionDemo = () => (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Key, { className: "h-5 w-5" }), "Role & Permission Testing"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsx("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: ["doctor", "nurse", "admin", "therapist"].map((role) => (_jsxs("div", { className: "flex items-center justify-between p-3 border rounded", children: [_jsx("span", { className: "capitalize", children: role }), isRole(role) ? (_jsx(CheckCircle, { className: "h-4 w-4 text-green-500" })) : (_jsx(AlertCircle, { className: "h-4 w-4 text-gray-400" }))] }, role))) }), _jsxs("div", { className: "border-t pt-4", children: [_jsx("h4", { className: "font-medium mb-3", children: "Permission Checks" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-2", children: [
                                        "read_patients",
                                        "write_patients",
                                        "read_clinical_forms",
                                        "write_clinical_forms",
                                        "admin_access",
                                        "delete_records",
                                    ].map((permission) => (_jsxs("div", { className: "flex items-center justify-between p-2 text-sm", children: [_jsx("span", { className: "font-mono", children: permission }), hasPermission(permission) ? (_jsx(CheckCircle, { className: "h-3 w-3 text-green-500" })) : (_jsx(AlertCircle, { className: "h-3 w-3 text-gray-400" }))] }, permission))) })] })] }) })] }));
    const ProtectedRouteDemo = () => (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Settings, { className: "h-5 w-5" }), "Protected Route Examples"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx("h4", { className: "font-medium", children: "Admin Only Section" }), _jsx(ProtectedRoute, { requiredRole: "admin", fallbackPath: "/login", children: _jsx("div", { className: "p-4 bg-green-50 border border-green-200 rounded", children: _jsx("p", { className: "text-green-800", children: "\u2705 You have admin access!" }) }) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("h4", { className: "font-medium", children: "Doctor Only Section" }), _jsx(ProtectedRoute, { requiredRole: "doctor", fallbackPath: "/login", children: _jsx("div", { className: "p-4 bg-green-50 border border-green-200 rounded", children: _jsx("p", { className: "text-green-800", children: "\u2705 You have doctor access!" }) }) })] }), _jsxs("div", { className: "space-y-2", children: [_jsx("h4", { className: "font-medium", children: "Permission-Based Section" }), _jsx(ProtectedRoute, { requiredPermission: "admin_access", fallbackPath: "/login", children: _jsx("div", { className: "p-4 bg-green-50 border border-green-200 rounded", children: _jsx("p", { className: "text-green-800", children: "\u2705 You have admin permissions!" }) }) })] })] }) })] }));
    if (loading) {
        return (_jsx("div", { className: "min-h-screen bg-gray-50 flex items-center justify-center p-4", children: _jsx(Card, { className: "w-full max-w-md", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-center", children: [_jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600" }), _jsx("span", { className: "ml-2", children: "Loading authentication..." })] }) }) }) }));
    }
    return (_jsx("div", { className: "min-h-screen bg-gray-50 p-4", children: _jsxs("div", { className: "container mx-auto max-w-6xl", children: [_jsx("div", { className: "mb-8", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold text-gray-900 mb-2", children: "Authentication Flow Demo" }), _jsx("p", { className: "text-gray-600", children: "Comprehensive testing of Supabase authentication and authorization" })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsxs(Badge, { variant: "outline", className: "flex items-center gap-2", children: [_jsx(Users, { className: "h-4 w-4" }), user ? "Authenticated" : "Not Authenticated"] }), user && (_jsx(Button, { variant: "outline", onClick: signOut, children: "Sign Out" }))] })] }) }), !user ? (_jsxs(DemoSection, { title: "Login Required", children: [_jsx("div", { className: "text-center mb-6", children: _jsx("p", { className: "text-gray-600 mb-4", children: "Please sign in to test the authentication features" }) }), _jsx(LoginForm, { onSuccess: () => window.location.reload() })] })) : (_jsxs(Tabs, { value: activeDemo, onValueChange: setActiveDemo, children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4", children: [_jsx(TabsTrigger, { value: "user", children: "User Info" }), _jsx(TabsTrigger, { value: "roles", children: "Roles & Permissions" }), _jsx(TabsTrigger, { value: "protected", children: "Protected Routes" }), _jsx(TabsTrigger, { value: "security", children: "Security Features" })] }), _jsx(TabsContent, { value: "user", className: "mt-6", children: _jsx(UserInfoCard, {}) }), _jsx(TabsContent, { value: "roles", className: "mt-6", children: _jsx(RolePermissionDemo, {}) }), _jsx(TabsContent, { value: "protected", className: "mt-6", children: _jsx(ProtectedRouteDemo, {}) }), _jsx(TabsContent, { value: "security", className: "mt-6", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Shield, { className: "h-5 w-5" }), "Security Features"] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { className: "p-4 border rounded", children: [_jsx("h4", { className: "font-medium mb-2", children: "Session Management" }), _jsx("p", { className: "text-sm text-gray-600 mb-2", children: "Automatic token refresh and session persistence" }), _jsx(Badge, { variant: "outline", children: "Active" })] }), _jsxs("div", { className: "p-4 border rounded", children: [_jsx("h4", { className: "font-medium mb-2", children: "Role-Based Access" }), _jsx("p", { className: "text-sm text-gray-600 mb-2", children: "Granular permissions based on user roles" }), _jsx(Badge, { variant: "outline", children: "Configured" })] }), _jsxs("div", { className: "p-4 border rounded", children: [_jsx("h4", { className: "font-medium mb-2", children: "Audit Logging" }), _jsx("p", { className: "text-sm text-gray-600 mb-2", children: "All actions are logged for compliance" }), _jsx(Badge, { variant: "outline", children: "Enabled" })] }), _jsxs("div", { className: "p-4 border rounded", children: [_jsx("h4", { className: "font-medium mb-2", children: "Data Encryption" }), _jsx("p", { className: "text-sm text-gray-600 mb-2", children: "AES-256 encryption for sensitive data" }), _jsx(Badge, { variant: "outline", children: "Active" })] })] }) }) })] }) })] }))] }) }));
};
export default AuthenticationFlowStoryboard;
