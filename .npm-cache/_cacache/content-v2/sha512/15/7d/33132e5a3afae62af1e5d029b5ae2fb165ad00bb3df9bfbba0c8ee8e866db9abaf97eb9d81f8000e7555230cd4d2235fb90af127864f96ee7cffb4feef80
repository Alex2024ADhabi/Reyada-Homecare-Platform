{"_id":"@tapjs/stack","_rev":"23-e4862e7fddb964de027380d589f0bcf8","name":"@tapjs/stack","dist-tags":{"pre":"1.0.0","latest":"4.0.0"},"versions":{"0.0.0-1":{"name":"@tapjs/stack","version":"0.0.0-1","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-1","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"coverage-map":"map.js"},"dist":{"shasum":"a0d8640d1f2b19293f07e389b81d0d6f07d5b704","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-1.tgz","fileCount":29,"integrity":"sha512-y3d2Tp9uBQ06bNY4XqXPz1X5O9WIaXIPrH8w/NhJ9di4jNc1J/Pb0CzkwOu9thE62N3lKWS8eyONESIbuxIPnA==","signatures":[{"sig":"MEQCIBKg1uEtC6AHk/zmD/bSYQMgh3zbOU0P7SJw5AISTAT5AiAx+lB3LX0COoWIC8PJSligXPqAGQCD/vT08FHffay3uw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":186764},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","module":"./dist/mjs/index.js","engines":{"node":">=14"},"exports":{".":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.js"},"require":{"types":"./dist/cjs/index.d.ts","default":"./dist/cjs/index.js"}},"./package.json":{"import":"./package.json","require":"./package.json"}},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"432f3a535d5fa2638b8c5b2f2a8f18cb7355f3f8","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tsc -p tsconfig/cjs.json && tsc -p tsconfig/esm.json && bash ./scripts/fixup.sh","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.0.1-1","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-1_1691167401564_0.29458938029478676","host":"s3://npm-registry-packages"}},"0.0.0-2":{"name":"@tapjs/stack","version":"0.0.0-2","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-2","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"coverage-map":"map.js"},"dist":{"shasum":"461211ccaab866803f129a16240e66fb40583002","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-2.tgz","fileCount":37,"integrity":"sha512-sx+xTVTUSsYa7E9sHge6s1c5ocMPgzR64V1YUYxO7nthyzABkEyAZbU7BxX2Kw/TB4Qf8pv+HeXYUi5RJ5lIig==","signatures":[{"sig":"MEUCIEeqbutsYeS4BTr5d62KZs4nW/vXXYuObVY72lZhW9ixAiEA1aHoOTVWdFpfpiYzcDt53e/3iTcLuu6OjPElvaXIRLA=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":195861},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","module":"./dist/mjs/index.js","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe descendant of [tapjs/stack-utils](https://github.com/tapjs/stack-utils).\n","engines":{"node":">=14"},"exports":{".":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.js"},"require":{"types":"./dist/cjs/index.d.ts","default":"./dist/cjs/index.js"}},"./package.json":{"import":"./package.json","require":"./package.json"}},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"acffc81f6b3776fd18406bf3b5633b5b80b5c232","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tsc -p tsconfig/cjs.json && tsc -p tsconfig/esm.json && bash ./scripts/fixup.sh","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.0.1-1","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-2_1691379475376_0.36854360383514284","host":"s3://npm-registry-packages"}},"0.0.0-3":{"name":"@tapjs/stack","version":"0.0.0-3","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-3","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"coverage-map":"map.js"},"dist":{"shasum":"d0bd40630ec2de6075095c06be93164248ac1ccb","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-3.tgz","fileCount":37,"integrity":"sha512-TrN9REwhDpeD2dEAEBtRbRcj99VwprpNhuJTIEN3h1kgx8e8/VfD3xjdyTEiYB0H6YMlDNQWTdoLbeV+4knuOw==","signatures":[{"sig":"MEYCIQDyGiKGumFRD6AxxpjwUk5MW4JgP0oUgWq9LouLNqNtzQIhAJaZGECfZm8xyMQBczUVzPNve91tXtFrXDnU2kjKhPyy","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":196003},"type":"module","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe descendant of [tapjs/stack-utils](https://github.com/tapjs/stack-utils).\n","engines":{"node":">=14"},"exports":{".":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.js"},"require":{"types":"./dist/cjs/index.d.ts","default":"./dist/cjs/index.js"}},"./package.json":{"import":"./package.json","require":"./package.json"}},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"28002f3c88d5aa4da327ba9afe18199b9df02251","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tsc -p tsconfig/cjs.json && tsc -p tsconfig/esm.json && bash ./scripts/fixup.sh","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.0.1-2","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-3_1691610918680_0.5391578368743994","host":"s3://npm-registry-packages"}},"0.0.0-4":{"name":"@tapjs/stack","version":"0.0.0-4","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-4","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"coverage-map":"map.js"},"dist":{"shasum":"660b601fc396c69c1e712fb42519acc0b09ae438","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-4.tgz","fileCount":37,"integrity":"sha512-AbubsbUToJWNNCUbHiq+bVizRVjXae0dWg+6IlB3eZgxkBWP15/zenz2BKGq5VAl9nykJWTnyySo7UOc4+Epmg==","signatures":[{"sig":"MEQCICq7tEuPyoiGa6WFmTO5qT1iPpf3X6YhsVpnZFL+S6h1AiBbC+AeOSut8EVMx5u9+3v4EB2IHH/l7TWYXrTyM+s6fw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":196303},"type":"module","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe descendant of [tapjs/stack-utils](https://github.com/tapjs/stack-utils).\n","engines":{"node":">=14"},"exports":{".":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.js"},"require":{"types":"./dist/cjs/index.d.ts","default":"./dist/cjs/index.js"}},"./package.json":{"import":"./package.json","require":"./package.json"}},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"9a0e78ebb01ade449d8c077d0cc7a936772cd2c5","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tsc -p tsconfig/cjs.json && tsc -p tsconfig/esm.json && bash ./scripts/fixup.sh","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.0.1-3","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-4_1692079996290_0.39459858261424263","host":"s3://npm-registry-packages"}},"0.0.0-5":{"name":"@tapjs/stack","version":"0.0.0-5","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-5","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"coverage-map":"map.js"},"dist":{"shasum":"691a83f3f50d4e29b2fff991d435ca810298cde4","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-5.tgz","fileCount":37,"integrity":"sha512-WtJMsejym2B+Kex3jt4gM8pSQZL9P+RVfwUI2ozEfzNinBDcSDQfRnPlvAHhCU+USJFnld8jtRlfhHjl+EQxwg==","signatures":[{"sig":"MEQCIHAiE4aJTWGVQfCKbB762qhY6oA9brko11whcqSkq63CAiBIMl7eYsXnK8OdM9/nsZWGmR7pFTXOW9YSV+Va0o9WmQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":209268},"type":"module","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe spiritual descendant of\n[stack-utils](https://github.com/tapjs/stack-utils).\n\n## Class `CallSiteLike`\n\nThis is similar to the `CallSite` class in V8. However, rather\nthan provide methods to get all the relevant details about the\ncall site, it has them set as properties. Additionally, it may be\ngenerated by parsing a line from a string stack trace, which is\nuseful when tracking down the source of thrown errors.\n\nSee\n[the typedocs](https://tapjs.github.io/tapjs/classes/_tapjs_stack.call_site_like.CallSiteLike.html) for more information.\n\n## Class `CallSiteLikeJSON`\n\nThis is the \"plain old JavaScript object\" form of a\n`CallSiteLike` object, for use when serializing a `CallSiteLike`\nto YAML or JSON.\n\nIt contains all the same fields as `CallSiteLike`, but fields are\nunset rather than being set to `null` or `undefined` if they are\nnot relevant to the call site, to reduce noise when printing test\ndiagnostics.\n\nThe `toString()` value of CallSiteLike objects is a much terser\nrepresentation of the call site than the standard `Error.stack`\nstring, and it contains both the generated and origin call sites\nin the case of source mapped files.\n\nSee [the\ntypedocs](https://tapjs.github.io/tapjs/interfaces/_tapjs_stack.call_site_like.CallSiteLikeJSON.html)\nfor more information.\n\n## `at(fn?: Function): CallSiteLike | undefined`\n\nGet the call site in the stack either where `at()` is called, or\nwhere the supplied `fn` function is called.\n\nIf `fn` is provided, and is not in the current call stack, then\n`undefined` will be returned.\n\n## `capture(limit = 0, fn?: Function): CallSiteLike[]`\n\nGet an array of CallSiteLike objects for the current location,\nfrom the call to the `fn` argument if supplied, limited to the\nnumber of frames specified by `limit`.\n\nIf `fn` is supplied, and not in the current call stack, then an\nempty array will be returned.\n\nIf the `limit` argument is 0, then the current\n`Error.stackTraceLimit` value will be used.\n\nThis method is not re-entry safe, due to the fact that it relies\non temporarily overriding the global `Error.prepareStackTrace`.\nAs a result, if a capture() is triggered in any of the methods\nused by the `CallSiteLike` constructor (for example, if\n[`@tapjs/intercept`](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html)\nis used to capture the `process.cwd()` method, which is used by\n`path.resolve()`), then that will cause problems. To work around\nthis, if a re-entry is detected, then an empty stack of `[]` is\nreturned.\n\nEven if it was made re-entry safe, it would be easy to accidentally\ntrigger an infinite recursion and stack overflow in such a scenario, so\nreturning an empty stack in the case of re-entry is the best workaround.\n\n## `captureString(limit = 0, fn?: Function): string`\n\nThe same as `capture()`, but returns a string stack where each\nline is the `toString()` of the CallSiteLike object.\n\n## `captureError(er: Error): CallSiteLike[]`\n\nGet a stack of `CallSiteLike` objects by parsing the `stack`\nproperty of the supplied Error object.\n\nThis does _not_ actually look at the current call site, or do\nanything magical with the V8 engine. It's just parsing a string.\n\nWhile some effort is made to interpret stacks correctly when an\nError contains a `name` and `message`, remember that the\n`Error.stack` property in JavaScript is remarkably sloppy. In\nsome cases, if the `Error.message` contains `\\n` and some lines\nafter the first look like stack trace lines, incorrect data may\nresult. It's only as good as the stack you pass to it.\n\n## `captureErrorString(er: Error): string`\n\nThe same as `captureError` (with the same caveats) but presenting\nthe string stack where each line is the `toString()` value of the\nCallSiteLike object.\n\n## `parseStack(stack: string): CallSiteLike[]`\n\nTurn a string stack (either from `@tapjs/stack` or from a native\nError object) into an array of CallSiteLike objects.\n\nOnly useful in some niche situations, most of the time you're\nbetter off using `capture()` or `captureError()`.\n\n## `setCwd(cwd: string | undefined)`\n\nSet the current working directory used to shorten filename paths\nin CallSiteLike objects.\n\nDefault value is `process.cwd()`. Setting it to `undefined` will\ncause the CallSiteLike objects returned by the capture methods to\ndisplay full file paths.\n\n## `getCwd(): string | undefined`\n\nGet the current value of the effective cwd used by capture\nmethods.\n\n## `getFilterNodeInternals(): boolean`\n\nTells you whether or not node internals are being filtered out.\n\nDefaults to `true`\n\n## `setFilterNodeInternals(f: boolean)`\n\nSpecify whether node internals should be filtered out.\n\n## `getFilterIgnoredPackages(): boolean`\n\nTells you whether or not the set of ignored packages are being\nfiltered out.\n\nDefaults to `true`\n\n## `setFilterIgnoredPackages(f: boolean)`\n\nSpecify whether or not ignored packages should be filtered out.\n\n## `getIgnoredPackages(): string[]`\n\nGet the list of packages that are filtered out of captured stacks.\n\n## `addIgnoredPackage(pkg: string)`\n\nAdd a package to the filter set.\n\n## `removeIgnoredPackage(pkg: string)`\n\nRemove a package from the filter set.\n","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.js"},"require":{"types":"./dist/cjs/index.d.ts","default":"./dist/cjs/index.js"}},"./package.json":{"import":"./package.json","require":"./package.json"}},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"e3de44331a26fc39bba46e5dfb8f5989d8ef5f20","imports":{"#require-resolve":{"import":"./dist/mjs/require-resolve-esm.js","require":"./dist/cjs/require-resolve.js"}},"scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tsc -p tsconfig/cjs.json && tsc -p tsconfig/esm.json && bash ./scripts/fixup.sh","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.0.1-4","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-5_1693117020102_0.7036881059387241","host":"s3://npm-registry-packages"}},"0.0.0-6":{"name":"@tapjs/stack","version":"0.0.0-6","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-6","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"coverage-map":"map.js"},"dist":{"shasum":"f08bb5fbce31089da9d42b060b6870c301e65ce6","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-6.tgz","fileCount":37,"integrity":"sha512-txbi8LeLAvSmpKWmfoCvFAuIzt8trB4hagniy76TPzc0xKXXVKFx052Z0jx43Q9vRQlWD4pySizN8LVz1smYhg==","signatures":[{"sig":"MEQCIF4d3CC4+P+PRAgOpNeEG2teEIDkOrOxZef6g2Kqf3jRAiAc9jo5vvIkxYGwANTTjkHh5sNpN4OPF0zOQTuM/QsiHQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":208996},"type":"module","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe spiritual descendant of\n[stack-utils](https://github.com/tapjs/stack-utils).\n\n## Class `CallSiteLike`\n\nThis is similar to the `CallSite` class in V8. However, rather\nthan provide methods to get all the relevant details about the\ncall site, it has them set as properties. Additionally, it may be\ngenerated by parsing a line from a string stack trace, which is\nuseful when tracking down the source of thrown errors.\n\nSee\n[the typedocs](https://tapjs.github.io/tapjs/classes/_tapjs_stack.call_site_like.CallSiteLike.html) for more information.\n\n## Class `CallSiteLikeJSON`\n\nThis is the \"plain old JavaScript object\" form of a\n`CallSiteLike` object, for use when serializing a `CallSiteLike`\nto YAML or JSON.\n\nIt contains all the same fields as `CallSiteLike`, but fields are\nunset rather than being set to `null` or `undefined` if they are\nnot relevant to the call site, to reduce noise when printing test\ndiagnostics.\n\nThe `toString()` value of CallSiteLike objects is a much terser\nrepresentation of the call site than the standard `Error.stack`\nstring, and it contains both the generated and origin call sites\nin the case of source mapped files.\n\nSee [the\ntypedocs](https://tapjs.github.io/tapjs/interfaces/_tapjs_stack.call_site_like.CallSiteLikeJSON.html)\nfor more information.\n\n## `at(fn?: Function): CallSiteLike | undefined`\n\nGet the call site in the stack either where `at()` is called, or\nwhere the supplied `fn` function is called.\n\nIf `fn` is provided, and is not in the current call stack, then\n`undefined` will be returned.\n\n## `capture(limit = 0, fn?: Function): CallSiteLike[]`\n\nGet an array of CallSiteLike objects for the current location,\nfrom the call to the `fn` argument if supplied, limited to the\nnumber of frames specified by `limit`.\n\nIf `fn` is supplied, and not in the current call stack, then an\nempty array will be returned.\n\nIf the `limit` argument is 0, then the current\n`Error.stackTraceLimit` value will be used.\n\nThis method is not re-entry safe, due to the fact that it relies\non temporarily overriding the global `Error.prepareStackTrace`.\nAs a result, if a capture() is triggered in any of the methods\nused by the `CallSiteLike` constructor (for example, if\n[`@tapjs/intercept`](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html)\nis used to capture the `process.cwd()` method, which is used by\n`path.resolve()`), then that will cause problems. To work around\nthis, if a re-entry is detected, then an empty stack of `[]` is\nreturned.\n\nEven if it was made re-entry safe, it would be easy to accidentally\ntrigger an infinite recursion and stack overflow in such a scenario, so\nreturning an empty stack in the case of re-entry is the best workaround.\n\n## `captureString(limit = 0, fn?: Function): string`\n\nThe same as `capture()`, but returns a string stack where each\nline is the `toString()` of the CallSiteLike object.\n\n## `captureError(er: Error): CallSiteLike[]`\n\nGet a stack of `CallSiteLike` objects by parsing the `stack`\nproperty of the supplied Error object.\n\nThis does _not_ actually look at the current call site, or do\nanything magical with the V8 engine. It's just parsing a string.\n\nWhile some effort is made to interpret stacks correctly when an\nError contains a `name` and `message`, remember that the\n`Error.stack` property in JavaScript is remarkably sloppy. In\nsome cases, if the `Error.message` contains `\\n` and some lines\nafter the first look like stack trace lines, incorrect data may\nresult. It's only as good as the stack you pass to it.\n\n## `captureErrorString(er: Error): string`\n\nThe same as `captureError` (with the same caveats) but presenting\nthe string stack where each line is the `toString()` value of the\nCallSiteLike object.\n\n## `parseStack(stack: string): CallSiteLike[]`\n\nTurn a string stack (either from `@tapjs/stack` or from a native\nError object) into an array of CallSiteLike objects.\n\nOnly useful in some niche situations, most of the time you're\nbetter off using `capture()` or `captureError()`.\n\n## `setCwd(cwd: string | undefined)`\n\nSet the current working directory used to shorten filename paths\nin CallSiteLike objects.\n\nDefault value is `process.cwd()`. Setting it to `undefined` will\ncause the CallSiteLike objects returned by the capture methods to\ndisplay full file paths.\n\n## `getCwd(): string | undefined`\n\nGet the current value of the effective cwd used by capture\nmethods.\n\n## `getFilterNodeInternals(): boolean`\n\nTells you whether or not node internals are being filtered out.\n\nDefaults to `true`\n\n## `setFilterNodeInternals(f: boolean)`\n\nSpecify whether node internals should be filtered out.\n\n## `getFilterIgnoredPackages(): boolean`\n\nTells you whether or not the set of ignored packages are being\nfiltered out.\n\nDefaults to `true`\n\n## `setFilterIgnoredPackages(f: boolean)`\n\nSpecify whether or not ignored packages should be filtered out.\n\n## `getIgnoredPackages(): string[]`\n\nGet the list of packages that are filtered out of captured stacks.\n\n## `addIgnoredPackage(pkg: string)`\n\nAdd a package to the filter set.\n\n## `removeIgnoredPackage(pkg: string)`\n\nRemove a package from the filter set.\n","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.js"},"require":{"types":"./dist/cjs/index.d.ts","default":"./dist/cjs/index.js"}},"./package.json":{"import":"./package.json","require":"./package.json"}},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"db81e6e1b20006e5d0e710c50cb4b2481ec34c3a","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tsc -p tsconfig/cjs.json && tsc -p tsconfig/esm.json && bash ./scripts/fixup.sh","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.0.1-4","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-6_1693306078949_0.6685614859226332","host":"s3://npm-registry-packages"}},"0.0.0-7":{"name":"@tapjs/stack","version":"0.0.0-7","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-7","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"6c3a8fe5d95919beba25d64b66266e8126db65ba","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-7.tgz","fileCount":37,"integrity":"sha512-rT8tLCClP7MPRzEZYwHm4v9FbfSsIhMUsz+IK9RANX9JvvTSTXiX5F+KlHTZuW3szfSlJLyMDSbP5FX02XHyQQ==","signatures":[{"sig":"MEQCIELSniK7qh5rKv4xkSZZF6wG2B9OeWLkDReaLYnB54lqAiAPqBbJmtbceddNL39gGt3aONV7NGnwWg6dn1jLZuGvow==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":211410},"type":"module","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe spiritual descendant of\n[stack-utils](https://github.com/tapjs/stack-utils).\n\n## Class `CallSiteLike`\n\nThis is similar to the `CallSite` class in V8. However, rather\nthan provide methods to get all the relevant details about the\ncall site, it has them set as properties. Additionally, it may be\ngenerated by parsing a line from a string stack trace, which is\nuseful when tracking down the source of thrown errors.\n\nSee\n[the typedocs](https://tapjs.github.io/tapjs/classes/_tapjs_stack.call_site_like.CallSiteLike.html) for more information.\n\n## Class `CallSiteLikeJSON`\n\nThis is the \"plain old JavaScript object\" form of a\n`CallSiteLike` object, for use when serializing a `CallSiteLike`\nto YAML or JSON.\n\nIt contains all the same fields as `CallSiteLike`, but fields are\nunset rather than being set to `null` or `undefined` if they are\nnot relevant to the call site, to reduce noise when printing test\ndiagnostics.\n\nThe `toString()` value of CallSiteLike objects is a much terser\nrepresentation of the call site than the standard `Error.stack`\nstring, and it contains both the generated and origin call sites\nin the case of source mapped files.\n\nSee [the\ntypedocs](https://tapjs.github.io/tapjs/interfaces/_tapjs_stack.call_site_like.CallSiteLikeJSON.html)\nfor more information.\n\n## `at(fn?: Function): CallSiteLike | undefined`\n\nGet the call site in the stack either where `at()` is called, or\nwhere the supplied `fn` function is called.\n\nIf `fn` is provided, and is not in the current call stack, then\n`undefined` will be returned.\n\n## `capture(limit = 0, fn?: Function): CallSiteLike[]`\n\nGet an array of CallSiteLike objects for the current location,\nfrom the call to the `fn` argument if supplied, limited to the\nnumber of frames specified by `limit`.\n\nIf `fn` is supplied, and not in the current call stack, then an\nempty array will be returned.\n\nIf the `limit` argument is 0, then the current\n`Error.stackTraceLimit` value will be used.\n\nThis method is not re-entry safe, due to the fact that it relies\non temporarily overriding the global `Error.prepareStackTrace`.\nAs a result, if a capture() is triggered in any of the methods\nused by the `CallSiteLike` constructor (for example, if\n[`@tapjs/intercept`](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html)\nis used to capture the `process.cwd()` method, which is used by\n`path.resolve()`), then that will cause problems. To work around\nthis, if a re-entry is detected, then an empty stack of `[]` is\nreturned.\n\nEven if it was made re-entry safe, it would be easy to accidentally\ntrigger an infinite recursion and stack overflow in such a scenario, so\nreturning an empty stack in the case of re-entry is the best workaround.\n\n## `captureString(limit = 0, fn?: Function): string`\n\nThe same as `capture()`, but returns a string stack where each\nline is the `toString()` of the CallSiteLike object.\n\n## `captureError(er: Error): CallSiteLike[]`\n\nGet a stack of `CallSiteLike` objects by parsing the `stack`\nproperty of the supplied Error object.\n\nThis does _not_ actually look at the current call site, or do\nanything magical with the V8 engine. It's just parsing a string.\n\nWhile some effort is made to interpret stacks correctly when an\nError contains a `name` and `message`, remember that the\n`Error.stack` property in JavaScript is remarkably sloppy. In\nsome cases, if the `Error.message` contains `\\n` and some lines\nafter the first look like stack trace lines, incorrect data may\nresult. It's only as good as the stack you pass to it.\n\n## `captureErrorString(er: Error): string`\n\nThe same as `captureError` (with the same caveats) but presenting\nthe string stack where each line is the `toString()` value of the\nCallSiteLike object.\n\n## `parseStack(stack: string): CallSiteLike[]`\n\nTurn a string stack (either from `@tapjs/stack` or from a native\nError object) into an array of CallSiteLike objects.\n\nOnly useful in some niche situations, most of the time you're\nbetter off using `capture()` or `captureError()`.\n\n## `setCwd(cwd: string | undefined)`\n\nSet the current working directory used to shorten filename paths\nin CallSiteLike objects.\n\nDefault value is `process.cwd()`. Setting it to `undefined` will\ncause the CallSiteLike objects returned by the capture methods to\ndisplay full file paths.\n\n## `getCwd(): string | undefined`\n\nGet the current value of the effective cwd used by capture\nmethods.\n\n## `getFilterNodeInternals(): boolean`\n\nTells you whether or not node internals are being filtered out.\n\nDefaults to `true`\n\n## `setFilterNodeInternals(f: boolean)`\n\nSpecify whether node internals should be filtered out.\n\n## `getFilterIgnoredPackages(): boolean`\n\nTells you whether or not the set of ignored packages are being\nfiltered out.\n\nDefaults to `true`\n\n## `setFilterIgnoredPackages(f: boolean)`\n\nSpecify whether or not ignored packages should be filtered out.\n\n## `getIgnoredPackages(): string[]`\n\nGet the list of packages that are filtered out of captured stacks.\n\n## `addIgnoredPackage(pkg: string)`\n\nAdd a package to the filter set.\n\n## `removeIgnoredPackage(pkg: string)`\n\nRemove a package from the filter set.\n","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.js"},"require":{"types":"./dist/cjs/index.d.ts","default":"./dist/cjs/index.js"}},"./package.json":{"import":"./package.json","require":"./package.json"}},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"aff25fcf09bb852ce3e2fa988e5a8abecd422ef1","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tsc -p tsconfig/cjs.json && tsc -p tsconfig/esm.json && bash ./scripts/fixup.sh","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.6.1","dependencies":{"tcompare":"6.0.1-4","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-7_1694370067860_0.5072933121822911","host":"s3://npm-registry-packages"}},"0.0.0-8":{"name":"@tapjs/stack","version":"0.0.0-8","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@0.0.0-8","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"242fdb4cf9f0655657f6597c4e0b5021b53e700c","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-0.0.0-8.tgz","fileCount":39,"integrity":"sha512-Ev+4Dfb2hedudCIt5+rK717SN9HRVWMhEJx3UcnqDnLUx4l+JiskEoXLdiGzJe3//hbJrE+qQGLfxDCFAknX1w==","signatures":[{"sig":"MEUCIF3Kc0f4M2MszXbh9q0IO+jlCpfKl9EUHA8vjVWlpaciAiEAtoyWIm0GiN8z9QQ+sOQUPfiXoATMPnwyy+0N1lIPcZM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":213176},"tshy":{"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe spiritual descendant of\n[stack-utils](https://github.com/tapjs/stack-utils).\n\n## Class `CallSiteLike`\n\nThis is similar to the `CallSite` class in V8. However, rather\nthan provide methods to get all the relevant details about the\ncall site, it has them set as properties. Additionally, it may be\ngenerated by parsing a line from a string stack trace, which is\nuseful when tracking down the source of thrown errors.\n\nSee\n[the typedocs](https://tapjs.github.io/tapjs/classes/_tapjs_stack.call_site_like.CallSiteLike.html) for more information.\n\n## Class `CallSiteLikeJSON`\n\nThis is the \"plain old JavaScript object\" form of a\n`CallSiteLike` object, for use when serializing a `CallSiteLike`\nto YAML or JSON.\n\nIt contains all the same fields as `CallSiteLike`, but fields are\nunset rather than being set to `null` or `undefined` if they are\nnot relevant to the call site, to reduce noise when printing test\ndiagnostics.\n\nThe `toString()` value of CallSiteLike objects is a much terser\nrepresentation of the call site than the standard `Error.stack`\nstring, and it contains both the generated and origin call sites\nin the case of source mapped files.\n\nSee [the\ntypedocs](https://tapjs.github.io/tapjs/interfaces/_tapjs_stack.call_site_like.CallSiteLikeJSON.html)\nfor more information.\n\n## `at(fn?: Function): CallSiteLike | undefined`\n\nGet the call site in the stack either where `at()` is called, or\nwhere the supplied `fn` function is called.\n\nIf `fn` is provided, and is not in the current call stack, then\n`undefined` will be returned.\n\n## `capture(limit = 0, fn?: Function): CallSiteLike[]`\n\nGet an array of CallSiteLike objects for the current location,\nfrom the call to the `fn` argument if supplied, limited to the\nnumber of frames specified by `limit`.\n\nIf `fn` is supplied, and not in the current call stack, then an\nempty array will be returned.\n\nIf the `limit` argument is 0, then the current\n`Error.stackTraceLimit` value will be used.\n\nThis method is not re-entry safe, due to the fact that it relies\non temporarily overriding the global `Error.prepareStackTrace`.\nAs a result, if a capture() is triggered in any of the methods\nused by the `CallSiteLike` constructor (for example, if\n[`@tapjs/intercept`](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html)\nis used to capture the `process.cwd()` method, which is used by\n`path.resolve()`), then that will cause problems. To work around\nthis, if a re-entry is detected, then an empty stack of `[]` is\nreturned.\n\nEven if it was made re-entry safe, it would be easy to accidentally\ntrigger an infinite recursion and stack overflow in such a scenario, so\nreturning an empty stack in the case of re-entry is the best workaround.\n\n## `captureString(limit = 0, fn?: Function): string`\n\nThe same as `capture()`, but returns a string stack where each\nline is the `toString()` of the CallSiteLike object.\n\n## `captureError(er: Error): CallSiteLike[]`\n\nGet a stack of `CallSiteLike` objects by parsing the `stack`\nproperty of the supplied Error object.\n\nThis does _not_ actually look at the current call site, or do\nanything magical with the V8 engine. It's just parsing a string.\n\nWhile some effort is made to interpret stacks correctly when an\nError contains a `name` and `message`, remember that the\n`Error.stack` property in JavaScript is remarkably sloppy. In\nsome cases, if the `Error.message` contains `\\n` and some lines\nafter the first look like stack trace lines, incorrect data may\nresult. It's only as good as the stack you pass to it.\n\n## `captureErrorString(er: Error): string`\n\nThe same as `captureError` (with the same caveats) but presenting\nthe string stack where each line is the `toString()` value of the\nCallSiteLike object.\n\n## `parseStack(stack: string): CallSiteLike[]`\n\nTurn a string stack (either from `@tapjs/stack` or from a native\nError object) into an array of CallSiteLike objects.\n\nOnly useful in some niche situations, most of the time you're\nbetter off using `capture()` or `captureError()`.\n\n## `setCwd(cwd: string | undefined)`\n\nSet the current working directory used to shorten filename paths\nin CallSiteLike objects.\n\nDefault value is `process.cwd()`. Setting it to `undefined` will\ncause the CallSiteLike objects returned by the capture methods to\ndisplay full file paths.\n\n## `getCwd(): string | undefined`\n\nGet the current value of the effective cwd used by capture\nmethods.\n\n## `getFilterNodeInternals(): boolean`\n\nTells you whether or not node internals are being filtered out.\n\nDefaults to `true`\n\n## `setFilterNodeInternals(f: boolean)`\n\nSpecify whether node internals should be filtered out.\n\n## `getFilterIgnoredPackages(): boolean`\n\nTells you whether or not the set of ignored packages are being\nfiltered out.\n\nDefaults to `true`\n\n## `setFilterIgnoredPackages(f: boolean)`\n\nSpecify whether or not ignored packages should be filtered out.\n\n## `getIgnoredPackages(): string[]`\n\nGet the list of packages that are filtered out of captured stacks.\n\n## `addIgnoredPackage(pkg: string)`\n\nAdd a package to the filter set.\n\n## `removeIgnoredPackage(pkg: string)`\n\nRemove a package from the filter set.\n","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"82f48cd053bb57d17a5146b4e385d588f05d1a22","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.0.1-5","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_0.0.0-8_1694624489853_0.37503394033774207","host":"s3://npm-registry-packages"}},"1.0.0":{"name":"@tapjs/stack","version":"1.0.0","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.0.0","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"4b0678a9100a3ca35ce771c95b23ecfd5ff3f350","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.0.0.tgz","fileCount":39,"integrity":"sha512-dAiIl3ojK8waJ0iJs4RE4nb/Glyy71fOVqSlEFe494ad5WKEtywrks8WfNEKstFiu9qvaDmeuf0hJFZEO26G4A==","signatures":[{"sig":"MEYCIQCuRwjZOPrH+nhkuqYYGjh7ycH3h7MWoZ5KOdtYm/VjUgIhAN2qJFMMjVFzI/1JXnhgar9uvRaasROUpYIou+O2F8F3","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":213172},"tshy":{"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe spiritual descendant of\n[stack-utils](https://github.com/tapjs/stack-utils).\n\n## Class `CallSiteLike`\n\nThis is similar to the `CallSite` class in V8. However, rather\nthan provide methods to get all the relevant details about the\ncall site, it has them set as properties. Additionally, it may be\ngenerated by parsing a line from a string stack trace, which is\nuseful when tracking down the source of thrown errors.\n\nSee\n[the typedocs](https://tapjs.github.io/tapjs/classes/_tapjs_stack.call_site_like.CallSiteLike.html) for more information.\n\n## Class `CallSiteLikeJSON`\n\nThis is the \"plain old JavaScript object\" form of a\n`CallSiteLike` object, for use when serializing a `CallSiteLike`\nto YAML or JSON.\n\nIt contains all the same fields as `CallSiteLike`, but fields are\nunset rather than being set to `null` or `undefined` if they are\nnot relevant to the call site, to reduce noise when printing test\ndiagnostics.\n\nThe `toString()` value of CallSiteLike objects is a much terser\nrepresentation of the call site than the standard `Error.stack`\nstring, and it contains both the generated and origin call sites\nin the case of source mapped files.\n\nSee [the\ntypedocs](https://tapjs.github.io/tapjs/interfaces/_tapjs_stack.call_site_like.CallSiteLikeJSON.html)\nfor more information.\n\n## `at(fn?: Function): CallSiteLike | undefined`\n\nGet the call site in the stack either where `at()` is called, or\nwhere the supplied `fn` function is called.\n\nIf `fn` is provided, and is not in the current call stack, then\n`undefined` will be returned.\n\n## `capture(limit = 0, fn?: Function): CallSiteLike[]`\n\nGet an array of CallSiteLike objects for the current location,\nfrom the call to the `fn` argument if supplied, limited to the\nnumber of frames specified by `limit`.\n\nIf `fn` is supplied, and not in the current call stack, then an\nempty array will be returned.\n\nIf the `limit` argument is 0, then the current\n`Error.stackTraceLimit` value will be used.\n\nThis method is not re-entry safe, due to the fact that it relies\non temporarily overriding the global `Error.prepareStackTrace`.\nAs a result, if a capture() is triggered in any of the methods\nused by the `CallSiteLike` constructor (for example, if\n[`@tapjs/intercept`](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html)\nis used to capture the `process.cwd()` method, which is used by\n`path.resolve()`), then that will cause problems. To work around\nthis, if a re-entry is detected, then an empty stack of `[]` is\nreturned.\n\nEven if it was made re-entry safe, it would be easy to accidentally\ntrigger an infinite recursion and stack overflow in such a scenario, so\nreturning an empty stack in the case of re-entry is the best workaround.\n\n## `captureString(limit = 0, fn?: Function): string`\n\nThe same as `capture()`, but returns a string stack where each\nline is the `toString()` of the CallSiteLike object.\n\n## `captureError(er: Error): CallSiteLike[]`\n\nGet a stack of `CallSiteLike` objects by parsing the `stack`\nproperty of the supplied Error object.\n\nThis does _not_ actually look at the current call site, or do\nanything magical with the V8 engine. It's just parsing a string.\n\nWhile some effort is made to interpret stacks correctly when an\nError contains a `name` and `message`, remember that the\n`Error.stack` property in JavaScript is remarkably sloppy. In\nsome cases, if the `Error.message` contains `\\n` and some lines\nafter the first look like stack trace lines, incorrect data may\nresult. It's only as good as the stack you pass to it.\n\n## `captureErrorString(er: Error): string`\n\nThe same as `captureError` (with the same caveats) but presenting\nthe string stack where each line is the `toString()` value of the\nCallSiteLike object.\n\n## `parseStack(stack: string): CallSiteLike[]`\n\nTurn a string stack (either from `@tapjs/stack` or from a native\nError object) into an array of CallSiteLike objects.\n\nOnly useful in some niche situations, most of the time you're\nbetter off using `capture()` or `captureError()`.\n\n## `setCwd(cwd: string | undefined)`\n\nSet the current working directory used to shorten filename paths\nin CallSiteLike objects.\n\nDefault value is `process.cwd()`. Setting it to `undefined` will\ncause the CallSiteLike objects returned by the capture methods to\ndisplay full file paths.\n\n## `getCwd(): string | undefined`\n\nGet the current value of the effective cwd used by capture\nmethods.\n\n## `getFilterNodeInternals(): boolean`\n\nTells you whether or not node internals are being filtered out.\n\nDefaults to `true`\n\n## `setFilterNodeInternals(f: boolean)`\n\nSpecify whether node internals should be filtered out.\n\n## `getFilterIgnoredPackages(): boolean`\n\nTells you whether or not the set of ignored packages are being\nfiltered out.\n\nDefaults to `true`\n\n## `setFilterIgnoredPackages(f: boolean)`\n\nSpecify whether or not ignored packages should be filtered out.\n\n## `getIgnoredPackages(): string[]`\n\nGet the list of packages that are filtered out of captured stacks.\n\n## `addIgnoredPackage(pkg: string)`\n\nAdd a package to the filter set.\n\n## `removeIgnoredPackage(pkg: string)`\n\nRemove a package from the filter set.\n","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"793c1c09f7c1262e9bf0947cf3915b6b13ab9c49","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"9.8.1","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"18.16.0","dependencies":{"tcompare":"6.1.0","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","_npmOperationalInternal":{"tmp":"tmp/stack_1.0.0_1694790293801_0.47170442474058727","host":"s3://npm-registry-packages"}},"1.1.0":{"name":"@tapjs/stack","version":"1.1.0","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.1.0","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"e6b46c568702e3120524f6cf7d2d612b61ac92c6","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.1.0.tgz","fileCount":39,"integrity":"sha512-L4ex6ZEAze4U2DDIth5nyzZfvwcK2BJOZKnlhRMpcxmSUpSas7oxnZeQVRfafZXzr4lE1ft/wNG5Ij/lx4lyag==","signatures":[{"sig":"MEQCIG7lLjdTKt1uTutEp6fQixQnAPkrKtQ5JgzLOjygS5m0AiBhDePYIQKj/rhEyM1ii4rUuEW5Qc+6kQNjfNxmd26eNg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229073},"tshy":{"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"86e5aaa0aea710e924b42bc4db9cfd93ef08394c","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.7.0","dependencies":{"tcompare":"6.1.0","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.1.0_1695431183891_0.03616480767116359","host":"s3://npm-registry-packages"}},"1.2.0":{"name":"@tapjs/stack","version":"1.2.0","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.0","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"02a0b843e5dd12812f7f9ddd3e6a0a6fa0b73695","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.0.tgz","fileCount":39,"integrity":"sha512-RzLspDcNQoGp+5BSMjZalMXIRdMLbkji9iTLZuu3qiJ4lbTsbRlWXus0RjJo61PYxuG/k0qIAPjVtKAigUaCBQ==","signatures":[{"sig":"MEUCIQCkW+xKqP9ogxON9mELaaxgiaVnTXJ7cytz5ROzc+StoQIgKlmxYh5p13GI8yhCGXlZ5K6cZuapEO6agSv7ACCi7LA=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229170},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"53043a233ef2238706304b8872a28ce6ef0864f4","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.7.0","dependencies":{"tcompare":"6.2.0","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.0_1695859059540_0.3804535448055617","host":"s3://npm-registry-packages"}},"1.2.1":{"name":"@tapjs/stack","version":"1.2.1","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.1","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"d394c16015a15e1fc838c10e6aac7bf9117e3a95","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.1.tgz","fileCount":39,"integrity":"sha512-qzBOiy55asFRBLE6cagW6BRUWrJYBnjGoLfiKyrkGsnpJubc/6d1j6BCO0HhSDGgd/0gYTc0NR0tOjGMajxWmQ==","signatures":[{"sig":"MEQCID40pHez+4k6M4V/kTgaakXegE9mS3x30hT2BT+aHUUCAiAFrfUeK6hPdSIF4Ds+hts1FMAiEUMXsqiHWKZvwrEoDw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229170},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"6aa191714fdad25a71fc9d49e54c6c7a694b6c2a","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.7.0","dependencies":{"tcompare":"6.2.1","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.1_1695932206049_0.5788421688038701","host":"s3://npm-registry-packages"}},"1.2.2":{"name":"@tapjs/stack","version":"1.2.2","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.2","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"76b8e415bbd8cb5e893a625e15813a0dbb90896b","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.2.tgz","fileCount":39,"integrity":"sha512-dP/PcqyCJ5vdqlqgqsuKx+t2V5jAJYO6htMHk0+8hH07tkY5r00zo9EplX+C+KbwB4XH3bb+K7YXz43IlV6Mmw==","signatures":[{"sig":"MEYCIQCkMXiEFS711QGn63kkIgBABn1uzhqVcr7Gjdux7iDIcwIhAJJ4YMx+wg6wDI4XlQx0DrVsivOkHxs9gw1q1GmANWyp","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229170},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"09506ad13b042d1d181b620ea64b8927d2ca0aeb","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.7.0","dependencies":{"tcompare":"6.3.0","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.2_1695935725533_0.8165321065363618","host":"s3://npm-registry-packages"}},"1.2.3":{"name":"@tapjs/stack","version":"1.2.3","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.3","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"3368f9a610cbbf90f7bb741a18ac03d0cb6804e7","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.3.tgz","fileCount":39,"integrity":"sha512-LY7Rxse2QY+DczTCoqOA4rxjqhnCgXYZeynrhzOsiut6IVnDWnqjUvZMq1XYnk5G69lhgG5lTDHmZrKP33BKgg==","signatures":[{"sig":"MEUCIQDNy4/5fEczbmdAECd9wpyKnsW7iqp02wmPR0M9iolFvgIgDjyk+hCG9cDROUJpQkcTLmV4nbfB74Xb5J5UkxTdqeE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229170},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"414d146d35f17799fceb31b370f0d1a5b5b2c717","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.7.0","dependencies":{"tcompare":"6.4.0","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.3_1696010924902_0.8834303172048814","host":"s3://npm-registry-packages"}},"1.2.4":{"name":"@tapjs/stack","version":"1.2.4","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.4","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"7ff55b93c0ab0fab63eb784da195f48460c7cc74","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.4.tgz","fileCount":39,"integrity":"sha512-pDszoMPff4W8w8aQiV8Ic2jE39ddsij1QlPZYelFxuvub3M6hJVO4apgXY/TFirPvd/jdPHUGkv4vpACKMlPGA==","signatures":[{"sig":"MEQCICq6Se9LuLWdYn7dbj36hsj6yVZa6xAGhNJPnne7kw8AAiAriUERL8Kogz5193zBHl4nQYKUmjaxoX5CwI8t0/Cnug==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229170},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"69c31a863ab37a55c5d31a00de4ff119cef93a97","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.7.0","dependencies":{"tcompare":"6.4.1","trivial-deferred":"^2.0.0"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.4_1696196219484_0.18959454585769664","host":"s3://npm-registry-packages"}},"1.2.5":{"name":"@tapjs/stack","version":"1.2.5","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.5","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"55ca263a4a1cdc97cce006eb43c6bad021e03e36","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.5.tgz","fileCount":39,"integrity":"sha512-fJNI6kmqo1FuXzVkQ1cFL5FcWYamiql5lTDbA2VuOkQ7z3/Zoitnq+B9rBf28ltmZYFMsk5lEEW8mlaxvCyHiA==","signatures":[{"sig":"MEUCIQDEb2I0CsICTY9u+BhN9T9sUQj+7zbdnoMIArgobeD1QwIgaRwzsUxbPosAnz6pPTlJFAAnY5N+n/umARH7RBi3jRA=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229087},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"dcd5846da60446b8a59fe723c1d10a8c6b12900b","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.7.0","_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.5_1696546816859_0.783872231481936","host":"s3://npm-registry-packages"}},"1.2.6":{"name":"@tapjs/stack","version":"1.2.6","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.6","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"34cf61ad869e702563f537ba41befe9ad66d0398","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.6.tgz","fileCount":39,"integrity":"sha512-us73FMZytpcvYT/gOSDDKHk/LLZQZ/bBLoz48VcEE5EFQmF0EELhNOlyg4Rrvj8DmuYuFjiliidiV/FB1Fchaw==","signatures":[{"sig":"MEQCIETbeKMlUYoSzwXzgv7hgs8VooSKeTbf/ugW4MpBLyPFAiAYdGP43hvDgfZFnwO9sk6+CL/vSfxOzvdMEvZMuJJKoA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229213},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">=16"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"3dbd11396e628dea99cdcd75e06f83e81fa3ebbf","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.8.0","_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.6_1697399081055_0.33785123609664414","host":"s3://npm-registry-packages"}},"1.2.7":{"name":"@tapjs/stack","version":"1.2.7","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.7","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"09d4cb7da780689f010fdb9a0bd87c3bf78ac0de","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.7.tgz","fileCount":39,"integrity":"sha512-7qUDWDmd+y7ZQ0vTrDTvFlWnJ+ND32NemS5HVuT1ZggHtBwJ62PQHIyCx/B5RopETBb6NvFPfUE21yTiex9Jkw==","signatures":[{"sig":"MEYCIQCl1oxZNc+DtRrr3awRAve6us0mdcDbRCHr1xtpfAYNHQIhANIPlbbj1JChtnisLFraYER6MIMRD1lkloKBUxUSZ4TK","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229245},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":"16 >=16.17.0 || 18 >= 18.6.0 || >=20"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"08387d9848c6c64dad8b50733c00bcbcb9fc091d","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.1.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.8.0","_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.7_1698789737874_0.44836875728590564","host":"s3://npm-registry-packages"}},"1.2.8":{"name":"@tapjs/stack","version":"1.2.8","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@1.2.8","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"17b6473b75b3dc069b538ff5ea081a246b6c8088","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-1.2.8.tgz","fileCount":37,"integrity":"sha512-VC8h6U62ScerTKN+MYpRPiwH2bCL65S6v1wcj1hukE2hojLcRvVdET7S3ZtRfSj/eNWW/5OVfzTpHiGjEYD6Xg==","signatures":[{"sig":"MEYCIQCXDSH89oIKXb/OI8ycrZocQOfHSVPdjZHXLhpV0SWsSwIhAJvxYCdujYjPUUoKqMg2ozJkRf7U4phh85EBF8vhfibu","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":228711},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":"16 >=16.17.0 || 18 >= 18.6.0 || >=20"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"bf457f241276af8b39d10c1076929574473ed098","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.5.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.11.0","_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_1.2.8_1711495536126_0.8461984158171976","host":"s3://npm-registry-packages"}},"2.0.0":{"name":"@tapjs/stack","version":"2.0.0","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@2.0.0","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"671d6041347b720b9d8681f9ba342b97646c5ea4","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-2.0.0.tgz","fileCount":37,"integrity":"sha512-8Ebx6CfG0W2s9UusxRXla5x1Gi5dfCm6OCig4ZuD6X+NS7HQD1DltM0KCmKssV2M3mj6k1XOdxRqAKwo9TS0eg==","signatures":[{"sig":"MEUCIQCmfqEeS+MkobAAsKFXyApdheAqbpg/VvotSxoQWq4VmAIgWm8GVv0qMSECTusonorZWh4Va70KOMAJWrq9imMaci4=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":230202},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":"16 >=16.17.0 || 18 >= 18.6.0 || >=20"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"f3f99d8a48102fddc1550475c36b8ef215d4b0e6","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.7.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.13.1","_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_2.0.0_1716326585513_0.8424537668959446","host":"s3://npm-registry-packages"}},"2.0.1":{"name":"@tapjs/stack","version":"2.0.1","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@2.0.1","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"bbe8b04edd3676072fd9d1baf674dded91a9c586","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-2.0.1.tgz","fileCount":37,"integrity":"sha512-3rKbZkRkLeJl9ilV/6b80YfI4C4+OYf7iEz5/d0MIVhmVvxv0ttIy5JnZutAc4Gy9eRp5Ne5UTAIFOVY5k36cg==","signatures":[{"sig":"MEQCIHb/pD0Fnz3/Hyqox1n7G8mYQethQJgNv1Zk+vCyfyZ0AiA3T7WNZQeoZkQ5tO31RqYlq6UtsKmQ9P7brNNhfPcdew==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":230202},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":"16 >=16.17.0 || 18 >= 18.6.0 || >=20"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"e49b6dbd41c089bb40446a07c5c92109bc3c1a9e","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.7.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.13.1","_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_2.0.1_1716578218480_0.5591994946418526","host":"s3://npm-registry-packages"}},"3.0.0":{"name":"@tapjs/stack","version":"3.0.0","author":{"url":"https://blog.izs.me","name":"Isaac Z. Schlueter","email":"i@izs.me"},"license":"BlueOak-1.0.0","_id":"@tapjs/stack@3.0.0","homepage":"https://github.com/tapjs/tapjs#readme","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"tap":{"typecheck":false,"coverage-map":"map.js"},"dist":{"shasum":"7fea9dff9eaf40bf00674ee1d7658f8d60e6bc8e","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-3.0.0.tgz","fileCount":37,"integrity":"sha512-TrwR50bVb5Q6Vzc2XSoGwpkTchqcL3RU146jyEIG6GMfcg0WVNCtZaNu4e6wGFBnXvbRXbQ994bSpcBBSy3OBw==","signatures":[{"sig":"MEYCIQC9hQHGVZz8GRO26ioic7XoU3YvABojb14y5XOTpX2xowIhAJY+0izzPcgtciqaT1UIStypRVgDSlbi2nWF0mpA0KUx","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229711},"main":"./dist/commonjs/index.js","tshy":{"main":true,"exports":{".":"./src/index.ts","./package.json":"./package.json"}},"type":"module","types":"./dist/commonjs/index.d.ts","engines":{"node":">= 18.6.0"},"exports":{".":{"import":{"types":"./dist/esm/index.d.ts","source":"./src/index.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","source":"./src/index.ts","default":"./dist/commonjs/index.js"}},"./package.json":"./package.json"},"funding":{"url":"https://github.com/sponsors/isaacs"},"gitHead":"7c022d052fef858727bb58dc37f508a76a6e062b","scripts":{"snap":"tap","test":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","prepare":"tshy","presnap":"npm run prepare","pretest":"npm run prepare","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"repository":{"url":"git+https://github.com/tapjs/tapjs.git","type":"git"},"_npmVersion":"10.7.0","description":"Utility for working with stack traces","directories":{},"_nodeVersion":"20.13.1","_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/stack_3.0.0_1719263855097_0.47393210304088873","host":"s3://npm-registry-packages"}},"4.0.0":{"name":"@tapjs/stack","version":"4.0.0","description":"Utility for working with stack traces","tshy":{"main":true,"exports":{"./package.json":"./package.json",".":"./src/index.ts"}},"type":"module","main":"./dist/commonjs/index.js","types":"./dist/commonjs/index.d.ts","exports":{"./package.json":"./package.json",".":{"import":{"types":"./dist/esm/index.d.ts","default":"./dist/esm/index.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.js"}}},"scripts":{"prepare":"tshy","pretest":"npm run prepare","presnap":"npm run prepare","test":"tap","snap":"tap","format":"prettier --write . --loglevel warn --ignore-path ../../.prettierignore --cache","typedoc":"typedoc --tsconfig tsconfig/esm.json ./src/*.ts"},"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"https://blog.izs.me"},"license":"BlueOak-1.0.0","tap":{"typecheck":false,"coverage-map":"map.js"},"funding":{"url":"https://github.com/sponsors/isaacs"},"repository":{"type":"git","url":"git+https://github.com/tapjs/tapjs.git"},"module":"./dist/esm/index.js","engines":{"node":"20 || >=22"},"_id":"@tapjs/stack@4.0.0","gitHead":"f4c46d4e0c4489b30cbc79391257cecafa95063b","bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"homepage":"https://github.com/tapjs/tapjs#readme","_nodeVersion":"20.13.1","_npmVersion":"10.7.0","dist":{"integrity":"sha512-uj6BvHXvLf1qILvcpYit9D6JX7pg4eSbaxm1MhWpi8wdhSQyUAOe4gxCMTfJpW0ekB48N4QN3S3vaq7rWtFctw==","shasum":"2fc010275f5101fd5812e8be45145a33d5ac0325","tarball":"https://registry.npmjs.org/@tapjs/stack/-/stack-4.0.0.tgz","fileCount":37,"unpackedSize":229675,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC3bw/4Os4Yr4Q8yvPyCAqx+Ti2en3w3mEr2LoUfd4pBAiEAkFQKR/asD7Qh7YGUm72i8zL8fJrbs9lmFwLgowoa56U="}]},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"directories":{},"maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/stack_4.0.0_1720480737483_0.16166954387442622"},"_hasShrinkwrap":false}},"time":{"created":"2023-08-04T16:43:21.498Z","modified":"2024-07-08T23:18:57.836Z","0.0.0-1":"2023-08-04T16:43:21.825Z","0.0.0-2":"2023-08-07T03:37:55.535Z","0.0.0-3":"2023-08-09T19:55:18.901Z","0.0.0-4":"2023-08-15T06:13:16.497Z","0.0.0-5":"2023-08-27T06:17:00.303Z","0.0.0-6":"2023-08-29T10:47:59.183Z","0.0.0-7":"2023-09-10T18:21:08.067Z","0.0.0-8":"2023-09-13T17:01:30.051Z","1.0.0":"2023-09-15T15:04:53.962Z","1.1.0":"2023-09-23T01:06:24.181Z","1.2.0":"2023-09-27T23:57:39.761Z","1.2.1":"2023-09-28T20:16:46.379Z","1.2.2":"2023-09-28T21:15:25.763Z","1.2.3":"2023-09-29T18:08:45.152Z","1.2.4":"2023-10-01T21:36:59.714Z","1.2.5":"2023-10-05T23:00:17.100Z","1.2.6":"2023-10-15T19:44:41.268Z","1.2.7":"2023-10-31T22:02:18.162Z","1.2.8":"2024-03-26T23:25:36.311Z","2.0.0":"2024-05-21T21:23:05.666Z","2.0.1":"2024-05-24T19:16:58.661Z","3.0.0":"2024-06-24T21:17:35.283Z","4.0.0":"2024-07-08T23:18:57.627Z"},"bugs":{"url":"https://github.com/tapjs/tapjs/issues"},"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":"https://blog.izs.me"},"license":"BlueOak-1.0.0","homepage":"https://github.com/tapjs/tapjs#readme","repository":{"type":"git","url":"git+https://github.com/tapjs/tapjs.git"},"description":"Utility for working with stack traces","maintainers":[{"name":"ljharb","email":"ljharb@gmail.com"},{"name":"isaacs","email":"i@izs.me"}],"readme":"# `@tapjs/stack`\n\nA comprehensive library for dealing with stack traces, supporting\nsource map lookup (when enabled in node with `--enable-source-maps`),\nfiltering of specified packages and/or Node.js internals, and\ncapturing call sites relative to a given function.\n\nThe spiritual descendant of\n[stack-utils](https://github.com/tapjs/stack-utils).\n\n## Class `CallSiteLike`\n\nThis is similar to the `CallSite` class in V8. However, rather\nthan provide methods to get all the relevant details about the\ncall site, it has them set as properties. Additionally, it may be\ngenerated by parsing a line from a string stack trace, which is\nuseful when tracking down the source of thrown errors.\n\nSee\n[the typedocs](https://tapjs.github.io/tapjs/classes/_tapjs_stack.call_site_like.CallSiteLike.html) for more information.\n\n## Class `CallSiteLikeJSON`\n\nThis is the \"plain old JavaScript object\" form of a\n`CallSiteLike` object, for use when serializing a `CallSiteLike`\nto YAML or JSON.\n\nIt contains all the same fields as `CallSiteLike`, but fields are\nunset rather than being set to `null` or `undefined` if they are\nnot relevant to the call site, to reduce noise when printing test\ndiagnostics.\n\nThe `toString()` value of CallSiteLike objects is a much terser\nrepresentation of the call site than the standard `Error.stack`\nstring, and it contains both the generated and origin call sites\nin the case of source mapped files.\n\nSee [the\ntypedocs](https://tapjs.github.io/tapjs/interfaces/_tapjs_stack.call_site_like.CallSiteLikeJSON.html)\nfor more information.\n\n## `at(fn?: Function): CallSiteLike | undefined`\n\nGet the call site in the stack either where `at()` is called, or\nwhere the supplied `fn` function is called.\n\nIf `fn` is provided, and is not in the current call stack, then\n`undefined` will be returned.\n\n## `capture(limit = 0, fn?: Function): CallSiteLike[]`\n\nGet an array of CallSiteLike objects for the current location,\nfrom the call to the `fn` argument if supplied, limited to the\nnumber of frames specified by `limit`.\n\nIf `fn` is supplied, and not in the current call stack, then an\nempty array will be returned.\n\nIf the `limit` argument is 0, then the current\n`Error.stackTraceLimit` value will be used.\n\nThis method is not re-entry safe, due to the fact that it relies\non temporarily overriding the global `Error.prepareStackTrace`.\nAs a result, if a capture() is triggered in any of the methods\nused by the `CallSiteLike` constructor (for example, if\n[`@tapjs/intercept`](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html)\nis used to capture the `process.cwd()` method, which is used by\n`path.resolve()`), then that will cause problems. To work around\nthis, if a re-entry is detected, then an empty stack of `[]` is\nreturned.\n\nEven if it was made re-entry safe, it would be easy to accidentally\ntrigger an infinite recursion and stack overflow in such a scenario, so\nreturning an empty stack in the case of re-entry is the best workaround.\n\n## `captureString(limit = 0, fn?: Function): string`\n\nThe same as `capture()`, but returns a string stack where each\nline is the `toString()` of the CallSiteLike object.\n\n## `captureError(er: Error): CallSiteLike[]`\n\nGet a stack of `CallSiteLike` objects by parsing the `stack`\nproperty of the supplied Error object.\n\nThis does _not_ actually look at the current call site, or do\nanything magical with the V8 engine. It's just parsing a string.\n\nWhile some effort is made to interpret stacks correctly when an\nError contains a `name` and `message`, remember that the\n`Error.stack` property in JavaScript is remarkably sloppy. In\nsome cases, if the `Error.message` contains `\\n` and some lines\nafter the first look like stack trace lines, incorrect data may\nresult. It's only as good as the stack you pass to it.\n\n## `captureErrorString(er: Error): string`\n\nThe same as `captureError` (with the same caveats) but presenting\nthe string stack where each line is the `toString()` value of the\nCallSiteLike object.\n\n## `parseStack(stack: string): CallSiteLike[]`\n\nTurn a string stack (either from `@tapjs/stack` or from a native\nError object) into an array of CallSiteLike objects.\n\nOnly useful in some niche situations, most of the time you're\nbetter off using `capture()` or `captureError()`.\n\n## `expandStack(stack?: string | CallSiteLike[]): string`\n\nExpand a stack string (either from `@tapjs/stack` or from a\nJS Error object) into its conventional `Error.stack` form,\ncomplete with absolute paths, indentation, and repetitive `at`\nprefixes.\n\nWhen a call site is source mapped, the origin source will be\nshown if the generated source is outside the cwd. If the cwd is\nnot set on the CallSiteLike object, then generated location is\nalways shown.\n\n## `setCwd(cwd: string | undefined)`\n\nSet the current working directory used to shorten filename paths\nin CallSiteLike objects.\n\nDefault value is `process.cwd()`. Setting it to `undefined` will\ncause the CallSiteLike objects returned by the capture methods to\ndisplay full file paths.\n\n## `getCwd(): string | undefined`\n\nGet the current value of the effective cwd used by capture\nmethods.\n\n## `getFilterNodeInternals(): boolean`\n\nTells you whether or not node internals are being filtered out.\n\nDefaults to `true`\n\n## `setFilterNodeInternals(f: boolean)`\n\nSpecify whether node internals should be filtered out.\n\n## `getFilterIgnoredPackages(): boolean`\n\nTells you whether or not the set of ignored packages are being\nfiltered out.\n\nDefaults to `true`\n\n## `setFilterIgnoredPackages(f: boolean)`\n\nSpecify whether or not ignored packages should be filtered out.\n\n## `getIgnoredPackages(): string[]`\n\nGet the list of packages that are filtered out of captured stacks.\n\n## `addIgnoredPackage(pkg: string)`\n\nAdd a package to the filter set.\n\n## `removeIgnoredPackage(pkg: string)`\n\nRemove a package from the filter set.\n","readmeFilename":"README.md"}